{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"stable/stretch_body/arm/","text":"stretch_body.arm \u00b6 Class Arm \u00b6 Arm () Source: stretch_body/arm.py API to the Stretch RE1 Arm Methods \u00b6 home \u00b6 home ( self , single_stop = True , measuring = False ) Source: stretch_body/arm.py Home to hardstops motor_current_to_translate_force \u00b6 motor_current_to_translate_force ( self , i ) Source: stretch_body/arm.py motor_rad_to_translate \u00b6 motor_rad_to_translate ( self , ang ) Source: stretch_body/arm.py move_by \u00b6 move_by ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/arm.py x_m: commanded incremental motion (meters). v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, extension direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, retraction direction) req_calibration: Disallow motion prior to homing move_to \u00b6 move_to ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/arm.py x_m: commanded absolute position (meters). x_m=0 is retracted. x_m=~0.5 is extended v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, extension direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, retraction direction) req_calibration: Disallow motion prior to homing pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/arm.py pull_status \u00b6 pull_status ( self ) Source: stretch_body/arm.py push_command \u00b6 push_command ( self ) Source: stretch_body/arm.py startup \u00b6 startup ( self ) Source: stretch_body/arm.py stop \u00b6 stop ( self ) Source: stretch_body/arm.py translate_force_to_motor_current \u00b6 translate_force_to_motor_current ( self , f ) Source: stretch_body/arm.py translate_to_motor_rad \u00b6 translate_to_motor_rad ( self , arm_m ) Source: stretch_body/arm.py","title":"arm"},{"location":"stable/stretch_body/arm/#stretch_bodyarm","text":"","title":"stretch_body.arm"},{"location":"stable/stretch_body/arm/#class-arm","text":"Arm () Source: stretch_body/arm.py API to the Stretch RE1 Arm","title":"Class Arm"},{"location":"stable/stretch_body/arm/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/arm/#home","text":"home ( self , single_stop = True , measuring = False ) Source: stretch_body/arm.py Home to hardstops","title":"home"},{"location":"stable/stretch_body/arm/#motor_current_to_translate_force","text":"motor_current_to_translate_force ( self , i ) Source: stretch_body/arm.py","title":"motor_current_to_translate_force"},{"location":"stable/stretch_body/arm/#motor_rad_to_translate","text":"motor_rad_to_translate ( self , ang ) Source: stretch_body/arm.py","title":"motor_rad_to_translate"},{"location":"stable/stretch_body/arm/#move_by","text":"move_by ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/arm.py x_m: commanded incremental motion (meters). v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, extension direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, retraction direction) req_calibration: Disallow motion prior to homing","title":"move_by"},{"location":"stable/stretch_body/arm/#move_to","text":"move_to ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/arm.py x_m: commanded absolute position (meters). x_m=0 is retracted. x_m=~0.5 is extended v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, extension direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, retraction direction) req_calibration: Disallow motion prior to homing","title":"move_to"},{"location":"stable/stretch_body/arm/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/arm.py","title":"pretty_print"},{"location":"stable/stretch_body/arm/#pull_status","text":"pull_status ( self ) Source: stretch_body/arm.py","title":"pull_status"},{"location":"stable/stretch_body/arm/#push_command","text":"push_command ( self ) Source: stretch_body/arm.py","title":"push_command"},{"location":"stable/stretch_body/arm/#startup","text":"startup ( self ) Source: stretch_body/arm.py","title":"startup"},{"location":"stable/stretch_body/arm/#stop","text":"stop ( self ) Source: stretch_body/arm.py","title":"stop"},{"location":"stable/stretch_body/arm/#translate_force_to_motor_current","text":"translate_force_to_motor_current ( self , f ) Source: stretch_body/arm.py","title":"translate_force_to_motor_current"},{"location":"stable/stretch_body/arm/#translate_to_motor_rad","text":"translate_to_motor_rad ( self , arm_m ) Source: stretch_body/arm.py","title":"translate_to_motor_rad"},{"location":"stable/stretch_body/base/","text":"stretch_body.base \u00b6 Class Base \u00b6 Base () Source: stretch_body/base.py API to the Stretch RE1 Mobile Base Methods \u00b6 enable_freewheel_mode \u00b6 enable_freewheel_mode ( self ) Source: stretch_body/base.py Force motors into freewheel enable_pos_incr_mode \u00b6 enable_pos_incr_mode ( self ) Source: stretch_body/base.py Force motors into incremental position mode motor_current_to_rotation_torque \u00b6 motor_current_to_rotation_torque ( self , il , ir ) Source: stretch_body/base.py motor_current_to_translation_force \u00b6 motor_current_to_translation_force ( self , il , ir ) Source: stretch_body/base.py motor_rad_to_rotate \u00b6 motor_rad_to_rotate ( self , x_r ) Source: stretch_body/base.py motor_rad_to_translate \u00b6 motor_rad_to_translate ( self , x_r ) Source: stretch_body/base.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/base.py pull_status \u00b6 pull_status ( self ) Source: stretch_body/base.py Computes base odometery based on stepper positions / velocities push_command \u00b6 push_command ( self ) Source: stretch_body/base.py rotate_by \u00b6 rotate_by ( self , x_r , v_r = None , a_r = None , stiffness = None , contact_thresh_N = None ) Source: stretch_body/base.py Incremental rotation of the base x_r: desired motion (radians) v_r: velocity for trapezoidal motion profile (rad/s) a_r: acceleration for trapezoidal motion profile (rad/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_N: force threshold to stop motion (Not yet implemented) rotate_to_motor_rad \u00b6 rotate_to_motor_rad ( self , x_r ) Source: stretch_body/base.py rotation_to_translation \u00b6 rotation_to_translation ( self , x_r ) Source: stretch_body/base.py rotation_torque_to_motor_current \u00b6 rotation_torque_to_motor_current ( self , tq_Nm ) Source: stretch_body/base.py set_rotational_velocity \u00b6 set_rotational_velocity ( self , v_r , a_r = None ) Source: stretch_body/base.py Command the bases rotational velocity. Use care to prevent collisions / avoid runaways v_r: desired rotational velocity (rad/s) a_r: acceleration of motion profile (rad/s^2) set_translate_velocity \u00b6 set_translate_velocity ( self , v_m , a_m = None ) Source: stretch_body/base.py Command the bases translational velocity. Use care to prevent collisions / avoid runaways v_m: desired velocity (m/s) a_m: acceleration of motion profile (m/s^2) set_velocity \u00b6 set_velocity ( self , v_m , w_r , a = None ) Source: stretch_body/base.py Command the bases translational and rotational velocities simultaneously. Use care to prevent collisions / avoid runaways Parameters \u00b6 v_m : desired velocity (m/s) w_r : desired rotational velocity (rad/s) a : acceleration of motion profile (m/s^2 and rad/s^2) startup \u00b6 startup ( self ) Source: stretch_body/base.py step_sentry \u00b6 step_sentry ( self , x_lift , x_arm , x_wrist ) Source: stretch_body/base.py Only allow fast mobile base motion if the lift is low, the arm is retracted, and the wrist is stowed. This is intended to keep the center of mass low for increased stability and avoid catching the arm or tool on something. stop \u00b6 stop ( self ) Source: stretch_body/base.py translate_by \u00b6 translate_by ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_N = None ) Source: stretch_body/base.py Incremental translation of the base x_m: desired motion (m) v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_N: force threshold to stop motion (TODO: Not yet implemented) translate_to_motor_rad \u00b6 translate_to_motor_rad ( self , x_m ) Source: stretch_body/base.py translation_force_to_motor_current \u00b6 translation_force_to_motor_current ( self , f_N ) Source: stretch_body/base.py translation_to_rotation \u00b6 translation_to_rotation ( self , x_m ) Source: stretch_body/base.py","title":"base"},{"location":"stable/stretch_body/base/#stretch_bodybase","text":"","title":"stretch_body.base"},{"location":"stable/stretch_body/base/#class-base","text":"Base () Source: stretch_body/base.py API to the Stretch RE1 Mobile Base","title":"Class Base"},{"location":"stable/stretch_body/base/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/base/#enable_freewheel_mode","text":"enable_freewheel_mode ( self ) Source: stretch_body/base.py Force motors into freewheel","title":"enable_freewheel_mode"},{"location":"stable/stretch_body/base/#enable_pos_incr_mode","text":"enable_pos_incr_mode ( self ) Source: stretch_body/base.py Force motors into incremental position mode","title":"enable_pos_incr_mode"},{"location":"stable/stretch_body/base/#motor_current_to_rotation_torque","text":"motor_current_to_rotation_torque ( self , il , ir ) Source: stretch_body/base.py","title":"motor_current_to_rotation_torque"},{"location":"stable/stretch_body/base/#motor_current_to_translation_force","text":"motor_current_to_translation_force ( self , il , ir ) Source: stretch_body/base.py","title":"motor_current_to_translation_force"},{"location":"stable/stretch_body/base/#motor_rad_to_rotate","text":"motor_rad_to_rotate ( self , x_r ) Source: stretch_body/base.py","title":"motor_rad_to_rotate"},{"location":"stable/stretch_body/base/#motor_rad_to_translate","text":"motor_rad_to_translate ( self , x_r ) Source: stretch_body/base.py","title":"motor_rad_to_translate"},{"location":"stable/stretch_body/base/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/base.py","title":"pretty_print"},{"location":"stable/stretch_body/base/#pull_status","text":"pull_status ( self ) Source: stretch_body/base.py Computes base odometery based on stepper positions / velocities","title":"pull_status"},{"location":"stable/stretch_body/base/#push_command","text":"push_command ( self ) Source: stretch_body/base.py","title":"push_command"},{"location":"stable/stretch_body/base/#rotate_by","text":"rotate_by ( self , x_r , v_r = None , a_r = None , stiffness = None , contact_thresh_N = None ) Source: stretch_body/base.py Incremental rotation of the base x_r: desired motion (radians) v_r: velocity for trapezoidal motion profile (rad/s) a_r: acceleration for trapezoidal motion profile (rad/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_N: force threshold to stop motion (Not yet implemented)","title":"rotate_by"},{"location":"stable/stretch_body/base/#rotate_to_motor_rad","text":"rotate_to_motor_rad ( self , x_r ) Source: stretch_body/base.py","title":"rotate_to_motor_rad"},{"location":"stable/stretch_body/base/#rotation_to_translation","text":"rotation_to_translation ( self , x_r ) Source: stretch_body/base.py","title":"rotation_to_translation"},{"location":"stable/stretch_body/base/#rotation_torque_to_motor_current","text":"rotation_torque_to_motor_current ( self , tq_Nm ) Source: stretch_body/base.py","title":"rotation_torque_to_motor_current"},{"location":"stable/stretch_body/base/#set_rotational_velocity","text":"set_rotational_velocity ( self , v_r , a_r = None ) Source: stretch_body/base.py Command the bases rotational velocity. Use care to prevent collisions / avoid runaways v_r: desired rotational velocity (rad/s) a_r: acceleration of motion profile (rad/s^2)","title":"set_rotational_velocity"},{"location":"stable/stretch_body/base/#set_translate_velocity","text":"set_translate_velocity ( self , v_m , a_m = None ) Source: stretch_body/base.py Command the bases translational velocity. Use care to prevent collisions / avoid runaways v_m: desired velocity (m/s) a_m: acceleration of motion profile (m/s^2)","title":"set_translate_velocity"},{"location":"stable/stretch_body/base/#set_velocity","text":"set_velocity ( self , v_m , w_r , a = None ) Source: stretch_body/base.py Command the bases translational and rotational velocities simultaneously. Use care to prevent collisions / avoid runaways","title":"set_velocity"},{"location":"stable/stretch_body/base/#parameters","text":"v_m : desired velocity (m/s) w_r : desired rotational velocity (rad/s) a : acceleration of motion profile (m/s^2 and rad/s^2)","title":"Parameters"},{"location":"stable/stretch_body/base/#startup","text":"startup ( self ) Source: stretch_body/base.py","title":"startup"},{"location":"stable/stretch_body/base/#step_sentry","text":"step_sentry ( self , x_lift , x_arm , x_wrist ) Source: stretch_body/base.py Only allow fast mobile base motion if the lift is low, the arm is retracted, and the wrist is stowed. This is intended to keep the center of mass low for increased stability and avoid catching the arm or tool on something.","title":"step_sentry"},{"location":"stable/stretch_body/base/#stop","text":"stop ( self ) Source: stretch_body/base.py","title":"stop"},{"location":"stable/stretch_body/base/#translate_by","text":"translate_by ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_N = None ) Source: stretch_body/base.py Incremental translation of the base x_m: desired motion (m) v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_N: force threshold to stop motion (TODO: Not yet implemented)","title":"translate_by"},{"location":"stable/stretch_body/base/#translate_to_motor_rad","text":"translate_to_motor_rad ( self , x_m ) Source: stretch_body/base.py","title":"translate_to_motor_rad"},{"location":"stable/stretch_body/base/#translation_force_to_motor_current","text":"translation_force_to_motor_current ( self , f_N ) Source: stretch_body/base.py","title":"translation_force_to_motor_current"},{"location":"stable/stretch_body/base/#translation_to_rotation","text":"translation_to_rotation ( self , x_m ) Source: stretch_body/base.py","title":"translation_to_rotation"},{"location":"stable/stretch_body/cobbs_framing/","text":"stretch_body.cobbs_framing \u00b6 Class CobbsFraming \u00b6 CobbsFraming () Source: stretch_body/cobbs_framing.py Encoding for communications Methods \u00b6 calc_crc \u00b6 calc_crc ( self , buf , nr ) Source: stretch_body/cobbs_framing.py decode \u00b6 decode ( self , decode_buffer , data , size ) Source: stretch_body/cobbs_framing.py encode \u00b6 encode ( self , data , size ) Source: stretch_body/cobbs_framing.py receiveFramedData \u00b6 receiveFramedData ( self , buf , serial ) Source: stretch_body/cobbs_framing.py sendFramedData \u00b6 sendFramedData ( self , data , size , serial ) Source: stretch_body/cobbs_framing.py","title":"cobbs_framing"},{"location":"stable/stretch_body/cobbs_framing/#stretch_bodycobbs_framing","text":"","title":"stretch_body.cobbs_framing"},{"location":"stable/stretch_body/cobbs_framing/#class-cobbsframing","text":"CobbsFraming () Source: stretch_body/cobbs_framing.py Encoding for communications","title":"Class CobbsFraming"},{"location":"stable/stretch_body/cobbs_framing/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/cobbs_framing/#calc_crc","text":"calc_crc ( self , buf , nr ) Source: stretch_body/cobbs_framing.py","title":"calc_crc"},{"location":"stable/stretch_body/cobbs_framing/#decode","text":"decode ( self , decode_buffer , data , size ) Source: stretch_body/cobbs_framing.py","title":"decode"},{"location":"stable/stretch_body/cobbs_framing/#encode","text":"encode ( self , data , size ) Source: stretch_body/cobbs_framing.py","title":"encode"},{"location":"stable/stretch_body/cobbs_framing/#receiveframeddata","text":"receiveFramedData ( self , buf , serial ) Source: stretch_body/cobbs_framing.py","title":"receiveFramedData"},{"location":"stable/stretch_body/cobbs_framing/#sendframeddata","text":"sendFramedData ( self , data , size , serial ) Source: stretch_body/cobbs_framing.py","title":"sendFramedData"},{"location":"stable/stretch_body/device/","text":"stretch_body.device \u00b6 Class Device \u00b6 Device () Source: stretch_body/device.py Generic base class for all custom Stretch hardware Methods \u00b6 home \u00b6 home ( self ) Source: stretch_body/device.py overwrite_params \u00b6 overwrite_params ( self , factory_dict , user_dict ) Source: stretch_body/device.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/device.py pull_status \u00b6 pull_status ( self ) Source: stretch_body/device.py push_command \u00b6 push_command ( self ) Source: stretch_body/device.py startup \u00b6 startup ( self ) Source: stretch_body/device.py stop \u00b6 stop ( self ) Source: stretch_body/device.py write_device_params \u00b6 write_device_params ( self , device_name , params ) Source: stretch_body/device.py Class DeviceTimestamp \u00b6 DeviceTimestamp () Source: stretch_body/device.py Methods \u00b6 set \u00b6 set ( self , ts ) Source: stretch_body/device.py","title":"device"},{"location":"stable/stretch_body/device/#stretch_bodydevice","text":"","title":"stretch_body.device"},{"location":"stable/stretch_body/device/#class-device","text":"Device () Source: stretch_body/device.py Generic base class for all custom Stretch hardware","title":"Class Device"},{"location":"stable/stretch_body/device/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/device/#home","text":"home ( self ) Source: stretch_body/device.py","title":"home"},{"location":"stable/stretch_body/device/#overwrite_params","text":"overwrite_params ( self , factory_dict , user_dict ) Source: stretch_body/device.py","title":"overwrite_params"},{"location":"stable/stretch_body/device/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/device.py","title":"pretty_print"},{"location":"stable/stretch_body/device/#pull_status","text":"pull_status ( self ) Source: stretch_body/device.py","title":"pull_status"},{"location":"stable/stretch_body/device/#push_command","text":"push_command ( self ) Source: stretch_body/device.py","title":"push_command"},{"location":"stable/stretch_body/device/#startup","text":"startup ( self ) Source: stretch_body/device.py","title":"startup"},{"location":"stable/stretch_body/device/#stop","text":"stop ( self ) Source: stretch_body/device.py","title":"stop"},{"location":"stable/stretch_body/device/#write_device_params","text":"write_device_params ( self , device_name , params ) Source: stretch_body/device.py","title":"write_device_params"},{"location":"stable/stretch_body/device/#class-devicetimestamp","text":"DeviceTimestamp () Source: stretch_body/device.py","title":"Class DeviceTimestamp"},{"location":"stable/stretch_body/device/#methods_1","text":"","title":"Methods"},{"location":"stable/stretch_body/device/#set","text":"set ( self , ts ) Source: stretch_body/device.py","title":"set"},{"location":"stable/stretch_body/dynamixel_XL430/","text":"stretch_body.dynamixel_XL430 \u00b6 Class DynamixelXL430 \u00b6 DynamixelXL430 ( dxl_id , usb , port_handler = None , pt_lock = None ) Source: stretch_body/dynamixel_XL430.py Wrapping of Dynamixel X-Series interface Methods \u00b6 disable_torque \u00b6 disable_torque ( self ) Source: stretch_body/dynamixel_XL430.py do_ping \u00b6 do_ping ( self , verbose = True ) Source: stretch_body/dynamixel_XL430.py do_reboot \u00b6 do_reboot ( self ) Source: stretch_body/dynamixel_XL430.py enable_multiturn \u00b6 enable_multiturn ( self ) Source: stretch_body/dynamixel_XL430.py enable_pos \u00b6 enable_pos ( self ) Source: stretch_body/dynamixel_XL430.py enable_pwm \u00b6 enable_pwm ( self ) Source: stretch_body/dynamixel_XL430.py enable_torque \u00b6 enable_torque ( self ) Source: stretch_body/dynamixel_XL430.py enable_vel \u00b6 enable_vel ( self ) Source: stretch_body/dynamixel_XL430.py get_D_gain \u00b6 get_D_gain ( self ) Source: stretch_body/dynamixel_XL430.py get_I_gain \u00b6 get_I_gain ( self ) Source: stretch_body/dynamixel_XL430.py get_P_gain \u00b6 get_P_gain ( self ) Source: stretch_body/dynamixel_XL430.py get_comm_errors \u00b6 get_comm_errors ( self ) Source: stretch_body/dynamixel_XL430.py get_drive_mode \u00b6 get_drive_mode ( self ) Source: stretch_body/dynamixel_XL430.py get_hardware_error \u00b6 get_hardware_error ( self ) Source: stretch_body/dynamixel_XL430.py get_homing_offset \u00b6 get_homing_offset ( self ) Source: stretch_body/dynamixel_XL430.py get_id \u00b6 get_id ( self ) Source: stretch_body/dynamixel_XL430.py get_load \u00b6 get_load ( self ) Source: stretch_body/dynamixel_XL430.py get_max_pos_limit \u00b6 get_max_pos_limit ( self ) Source: stretch_body/dynamixel_XL430.py get_max_voltage_limit \u00b6 get_max_voltage_limit ( self ) Source: stretch_body/dynamixel_XL430.py get_min_pos_limit \u00b6 get_min_pos_limit ( self ) Source: stretch_body/dynamixel_XL430.py get_min_voltage_limit \u00b6 get_min_voltage_limit ( self ) Source: stretch_body/dynamixel_XL430.py get_operating_mode \u00b6 get_operating_mode ( self ) Source: stretch_body/dynamixel_XL430.py get_pos \u00b6 get_pos ( self ) Source: stretch_body/dynamixel_XL430.py get_profile_acceleration \u00b6 get_profile_acceleration ( self ) Source: stretch_body/dynamixel_XL430.py get_profile_velocity \u00b6 get_profile_velocity ( self ) Source: stretch_body/dynamixel_XL430.py get_pwm \u00b6 get_pwm ( self ) Source: stretch_body/dynamixel_XL430.py get_pwm_limit \u00b6 get_pwm_limit ( self ) Source: stretch_body/dynamixel_XL430.py get_shutdown \u00b6 get_shutdown ( self ) Source: stretch_body/dynamixel_XL430.py get_temp \u00b6 get_temp ( self ) Source: stretch_body/dynamixel_XL430.py get_temperature_limit \u00b6 get_temperature_limit ( self ) Source: stretch_body/dynamixel_XL430.py get_vel \u00b6 get_vel ( self ) Source: stretch_body/dynamixel_XL430.py go_to_pos \u00b6 go_to_pos ( self , x ) Source: stretch_body/dynamixel_XL430.py handle_comm_result \u00b6 handle_comm_result ( self , fx , dxl_comm_result , dxl_error ) Source: stretch_body/dynamixel_XL430.py is_calibrated \u00b6 is_calibrated ( self ) Source: stretch_body/dynamixel_XL430.py is_moving \u00b6 is_moving ( self ) Source: stretch_body/dynamixel_XL430.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/dynamixel_XL430.py read_int16_t \u00b6 read_int16_t ( self , addr ) Source: stretch_body/dynamixel_XL430.py read_int32_t \u00b6 read_int32_t ( self , addr ) Source: stretch_body/dynamixel_XL430.py set_D_gain \u00b6 set_D_gain ( self , x ) Source: stretch_body/dynamixel_XL430.py set_I_gain \u00b6 set_I_gain ( self , x ) Source: stretch_body/dynamixel_XL430.py set_P_gain \u00b6 set_P_gain ( self , x ) Source: stretch_body/dynamixel_XL430.py set_calibrated \u00b6 set_calibrated ( self , x ) Source: stretch_body/dynamixel_XL430.py set_drive_mode \u00b6 set_drive_mode ( self , vel_based = True , reverse = False ) Source: stretch_body/dynamixel_XL430.py set_homing_offset \u00b6 set_homing_offset ( self , x ) Source: stretch_body/dynamixel_XL430.py set_id \u00b6 set_id ( self , id ) Source: stretch_body/dynamixel_XL430.py set_max_pos_limit \u00b6 set_max_pos_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py set_max_voltage_limit \u00b6 set_max_voltage_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py set_min_pos_limit \u00b6 set_min_pos_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py set_min_voltage_limit \u00b6 set_min_voltage_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py set_moving_threshold \u00b6 set_moving_threshold ( self , x ) Source: stretch_body/dynamixel_XL430.py set_profile_acceleration \u00b6 set_profile_acceleration ( self , a ) Source: stretch_body/dynamixel_XL430.py set_profile_velocity \u00b6 set_profile_velocity ( self , v ) Source: stretch_body/dynamixel_XL430.py set_pwm \u00b6 set_pwm ( self , x ) Source: stretch_body/dynamixel_XL430.py set_pwm_limit \u00b6 set_pwm_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py set_return_delay_time \u00b6 set_return_delay_time ( self , x ) Source: stretch_body/dynamixel_XL430.py set_shutdown \u00b6 set_shutdown ( self ) Source: stretch_body/dynamixel_XL430.py set_temperature_limit \u00b6 set_temperature_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py startup \u00b6 startup ( self ) Source: stretch_body/dynamixel_XL430.py stop \u00b6 stop ( self ) Source: stretch_body/dynamixel_XL430.py zero_position \u00b6 zero_position ( self , verbose = False ) Source: stretch_body/dynamixel_XL430.py","title":"dynamixel_XL430"},{"location":"stable/stretch_body/dynamixel_XL430/#stretch_bodydynamixel_xl430","text":"","title":"stretch_body.dynamixel_XL430"},{"location":"stable/stretch_body/dynamixel_XL430/#class-dynamixelxl430","text":"DynamixelXL430 ( dxl_id , usb , port_handler = None , pt_lock = None ) Source: stretch_body/dynamixel_XL430.py Wrapping of Dynamixel X-Series interface","title":"Class DynamixelXL430"},{"location":"stable/stretch_body/dynamixel_XL430/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/dynamixel_XL430/#disable_torque","text":"disable_torque ( self ) Source: stretch_body/dynamixel_XL430.py","title":"disable_torque"},{"location":"stable/stretch_body/dynamixel_XL430/#do_ping","text":"do_ping ( self , verbose = True ) Source: stretch_body/dynamixel_XL430.py","title":"do_ping"},{"location":"stable/stretch_body/dynamixel_XL430/#do_reboot","text":"do_reboot ( self ) Source: stretch_body/dynamixel_XL430.py","title":"do_reboot"},{"location":"stable/stretch_body/dynamixel_XL430/#enable_multiturn","text":"enable_multiturn ( self ) Source: stretch_body/dynamixel_XL430.py","title":"enable_multiturn"},{"location":"stable/stretch_body/dynamixel_XL430/#enable_pos","text":"enable_pos ( self ) Source: stretch_body/dynamixel_XL430.py","title":"enable_pos"},{"location":"stable/stretch_body/dynamixel_XL430/#enable_pwm","text":"enable_pwm ( self ) Source: stretch_body/dynamixel_XL430.py","title":"enable_pwm"},{"location":"stable/stretch_body/dynamixel_XL430/#enable_torque","text":"enable_torque ( self ) Source: stretch_body/dynamixel_XL430.py","title":"enable_torque"},{"location":"stable/stretch_body/dynamixel_XL430/#enable_vel","text":"enable_vel ( self ) Source: stretch_body/dynamixel_XL430.py","title":"enable_vel"},{"location":"stable/stretch_body/dynamixel_XL430/#get_d_gain","text":"get_D_gain ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_D_gain"},{"location":"stable/stretch_body/dynamixel_XL430/#get_i_gain","text":"get_I_gain ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_I_gain"},{"location":"stable/stretch_body/dynamixel_XL430/#get_p_gain","text":"get_P_gain ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_P_gain"},{"location":"stable/stretch_body/dynamixel_XL430/#get_comm_errors","text":"get_comm_errors ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_comm_errors"},{"location":"stable/stretch_body/dynamixel_XL430/#get_drive_mode","text":"get_drive_mode ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_drive_mode"},{"location":"stable/stretch_body/dynamixel_XL430/#get_hardware_error","text":"get_hardware_error ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_hardware_error"},{"location":"stable/stretch_body/dynamixel_XL430/#get_homing_offset","text":"get_homing_offset ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_homing_offset"},{"location":"stable/stretch_body/dynamixel_XL430/#get_id","text":"get_id ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_id"},{"location":"stable/stretch_body/dynamixel_XL430/#get_load","text":"get_load ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_load"},{"location":"stable/stretch_body/dynamixel_XL430/#get_max_pos_limit","text":"get_max_pos_limit ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_max_pos_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#get_max_voltage_limit","text":"get_max_voltage_limit ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_max_voltage_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#get_min_pos_limit","text":"get_min_pos_limit ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_min_pos_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#get_min_voltage_limit","text":"get_min_voltage_limit ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_min_voltage_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#get_operating_mode","text":"get_operating_mode ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_operating_mode"},{"location":"stable/stretch_body/dynamixel_XL430/#get_pos","text":"get_pos ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_pos"},{"location":"stable/stretch_body/dynamixel_XL430/#get_profile_acceleration","text":"get_profile_acceleration ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_profile_acceleration"},{"location":"stable/stretch_body/dynamixel_XL430/#get_profile_velocity","text":"get_profile_velocity ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_profile_velocity"},{"location":"stable/stretch_body/dynamixel_XL430/#get_pwm","text":"get_pwm ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_pwm"},{"location":"stable/stretch_body/dynamixel_XL430/#get_pwm_limit","text":"get_pwm_limit ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_pwm_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#get_shutdown","text":"get_shutdown ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_shutdown"},{"location":"stable/stretch_body/dynamixel_XL430/#get_temp","text":"get_temp ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_temp"},{"location":"stable/stretch_body/dynamixel_XL430/#get_temperature_limit","text":"get_temperature_limit ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_temperature_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#get_vel","text":"get_vel ( self ) Source: stretch_body/dynamixel_XL430.py","title":"get_vel"},{"location":"stable/stretch_body/dynamixel_XL430/#go_to_pos","text":"go_to_pos ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"go_to_pos"},{"location":"stable/stretch_body/dynamixel_XL430/#handle_comm_result","text":"handle_comm_result ( self , fx , dxl_comm_result , dxl_error ) Source: stretch_body/dynamixel_XL430.py","title":"handle_comm_result"},{"location":"stable/stretch_body/dynamixel_XL430/#is_calibrated","text":"is_calibrated ( self ) Source: stretch_body/dynamixel_XL430.py","title":"is_calibrated"},{"location":"stable/stretch_body/dynamixel_XL430/#is_moving","text":"is_moving ( self ) Source: stretch_body/dynamixel_XL430.py","title":"is_moving"},{"location":"stable/stretch_body/dynamixel_XL430/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/dynamixel_XL430.py","title":"pretty_print"},{"location":"stable/stretch_body/dynamixel_XL430/#read_int16_t","text":"read_int16_t ( self , addr ) Source: stretch_body/dynamixel_XL430.py","title":"read_int16_t"},{"location":"stable/stretch_body/dynamixel_XL430/#read_int32_t","text":"read_int32_t ( self , addr ) Source: stretch_body/dynamixel_XL430.py","title":"read_int32_t"},{"location":"stable/stretch_body/dynamixel_XL430/#set_d_gain","text":"set_D_gain ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_D_gain"},{"location":"stable/stretch_body/dynamixel_XL430/#set_i_gain","text":"set_I_gain ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_I_gain"},{"location":"stable/stretch_body/dynamixel_XL430/#set_p_gain","text":"set_P_gain ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_P_gain"},{"location":"stable/stretch_body/dynamixel_XL430/#set_calibrated","text":"set_calibrated ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_calibrated"},{"location":"stable/stretch_body/dynamixel_XL430/#set_drive_mode","text":"set_drive_mode ( self , vel_based = True , reverse = False ) Source: stretch_body/dynamixel_XL430.py","title":"set_drive_mode"},{"location":"stable/stretch_body/dynamixel_XL430/#set_homing_offset","text":"set_homing_offset ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_homing_offset"},{"location":"stable/stretch_body/dynamixel_XL430/#set_id","text":"set_id ( self , id ) Source: stretch_body/dynamixel_XL430.py","title":"set_id"},{"location":"stable/stretch_body/dynamixel_XL430/#set_max_pos_limit","text":"set_max_pos_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_max_pos_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#set_max_voltage_limit","text":"set_max_voltage_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_max_voltage_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#set_min_pos_limit","text":"set_min_pos_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_min_pos_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#set_min_voltage_limit","text":"set_min_voltage_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_min_voltage_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#set_moving_threshold","text":"set_moving_threshold ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_moving_threshold"},{"location":"stable/stretch_body/dynamixel_XL430/#set_profile_acceleration","text":"set_profile_acceleration ( self , a ) Source: stretch_body/dynamixel_XL430.py","title":"set_profile_acceleration"},{"location":"stable/stretch_body/dynamixel_XL430/#set_profile_velocity","text":"set_profile_velocity ( self , v ) Source: stretch_body/dynamixel_XL430.py","title":"set_profile_velocity"},{"location":"stable/stretch_body/dynamixel_XL430/#set_pwm","text":"set_pwm ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_pwm"},{"location":"stable/stretch_body/dynamixel_XL430/#set_pwm_limit","text":"set_pwm_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_pwm_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#set_return_delay_time","text":"set_return_delay_time ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_return_delay_time"},{"location":"stable/stretch_body/dynamixel_XL430/#set_shutdown","text":"set_shutdown ( self ) Source: stretch_body/dynamixel_XL430.py","title":"set_shutdown"},{"location":"stable/stretch_body/dynamixel_XL430/#set_temperature_limit","text":"set_temperature_limit ( self , x ) Source: stretch_body/dynamixel_XL430.py","title":"set_temperature_limit"},{"location":"stable/stretch_body/dynamixel_XL430/#startup","text":"startup ( self ) Source: stretch_body/dynamixel_XL430.py","title":"startup"},{"location":"stable/stretch_body/dynamixel_XL430/#stop","text":"stop ( self ) Source: stretch_body/dynamixel_XL430.py","title":"stop"},{"location":"stable/stretch_body/dynamixel_XL430/#zero_position","text":"zero_position ( self , verbose = False ) Source: stretch_body/dynamixel_XL430.py","title":"zero_position"},{"location":"stable/stretch_body/dynamixel_X_chain/","text":"stretch_body.dynamixel_X_chain \u00b6 Class DynamixelXChain \u00b6 DynamixelXChain ( usb ) Source: stretch_body/dynamixel_X_chain.py This class manages a daisy chain of Dynamixel X-Series servos It allows adding more than one servo at run time It allos manage group reading of status data from servos so as to not overload the control bus Methods \u00b6 add_motor \u00b6 add_motor ( self , m ) Source: stretch_body/dynamixel_X_chain.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/dynamixel_X_chain.py pull_status \u00b6 pull_status ( self ) Source: stretch_body/dynamixel_X_chain.py startup \u00b6 startup ( self ) Source: stretch_body/dynamixel_X_chain.py stop \u00b6 stop ( self ) Source: stretch_body/dynamixel_X_chain.py sync_read \u00b6 sync_read ( self , reader ) Source: stretch_body/dynamixel_X_chain.py","title":"dynamixel_X_chain"},{"location":"stable/stretch_body/dynamixel_X_chain/#stretch_bodydynamixel_x_chain","text":"","title":"stretch_body.dynamixel_X_chain"},{"location":"stable/stretch_body/dynamixel_X_chain/#class-dynamixelxchain","text":"DynamixelXChain ( usb ) Source: stretch_body/dynamixel_X_chain.py This class manages a daisy chain of Dynamixel X-Series servos It allows adding more than one servo at run time It allos manage group reading of status data from servos so as to not overload the control bus","title":"Class DynamixelXChain"},{"location":"stable/stretch_body/dynamixel_X_chain/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/dynamixel_X_chain/#add_motor","text":"add_motor ( self , m ) Source: stretch_body/dynamixel_X_chain.py","title":"add_motor"},{"location":"stable/stretch_body/dynamixel_X_chain/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/dynamixel_X_chain.py","title":"pretty_print"},{"location":"stable/stretch_body/dynamixel_X_chain/#pull_status","text":"pull_status ( self ) Source: stretch_body/dynamixel_X_chain.py","title":"pull_status"},{"location":"stable/stretch_body/dynamixel_X_chain/#startup","text":"startup ( self ) Source: stretch_body/dynamixel_X_chain.py","title":"startup"},{"location":"stable/stretch_body/dynamixel_X_chain/#stop","text":"stop ( self ) Source: stretch_body/dynamixel_X_chain.py","title":"stop"},{"location":"stable/stretch_body/dynamixel_X_chain/#sync_read","text":"sync_read ( self , reader ) Source: stretch_body/dynamixel_X_chain.py","title":"sync_read"},{"location":"stable/stretch_body/dynamixel_hello_XL430/","text":"stretch_body.dynamixel_hello_XL430 \u00b6 Class DynamixelHelloXL430 \u00b6 DynamixelHelloXL430 ( name , chain = None ) Source: stretch_body/dynamixel_hello_XL430.py Abstract the Dynamixel X-Series to handle calibration, radians, etc Methods \u00b6 disable_torque \u00b6 disable_torque ( self ) Source: stretch_body/dynamixel_hello_XL430.py do_ping \u00b6 do_ping ( self , verbose ) Source: stretch_body/dynamixel_hello_XL430.py enable_pos \u00b6 enable_pos ( self ) Source: stretch_body/dynamixel_hello_XL430.py enable_pwm \u00b6 enable_pwm ( self ) Source: stretch_body/dynamixel_hello_XL430.py enable_torque \u00b6 enable_torque ( self ) Source: stretch_body/dynamixel_hello_XL430.py home \u00b6 home ( self , single_stop = False , move_to_zero = True , delay_at_stop = 0.0 ) Source: stretch_body/dynamixel_hello_XL430.py mark_zero \u00b6 mark_zero ( self ) Source: stretch_body/dynamixel_hello_XL430.py move_by \u00b6 move_by ( self , x_des , v_des = None , a_des = None ) Source: stretch_body/dynamixel_hello_XL430.py move_to \u00b6 move_to ( self , x_des , v_des = None , a_des = None ) Source: stretch_body/dynamixel_hello_XL430.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/dynamixel_hello_XL430.py pull_status \u00b6 pull_status ( self , data = None ) Source: stretch_body/dynamixel_hello_XL430.py quick_stop \u00b6 quick_stop ( self ) Source: stretch_body/dynamixel_hello_XL430.py rad_per_sec_sec_to_ticks \u00b6 rad_per_sec_sec_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py rad_per_sec_to_ticks \u00b6 rad_per_sec_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py rad_to_ticks \u00b6 rad_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py reboot \u00b6 reboot ( self ) Source: stretch_body/dynamixel_hello_XL430.py set_motion_params \u00b6 set_motion_params ( self , v_des = None , a_des = None ) Source: stretch_body/dynamixel_hello_XL430.py set_pwm \u00b6 set_pwm ( self , x ) Source: stretch_body/dynamixel_hello_XL430.py startup \u00b6 startup ( self ) Source: stretch_body/dynamixel_hello_XL430.py stop \u00b6 stop ( self ) Source: stretch_body/dynamixel_hello_XL430.py ticks_to_pct_load \u00b6 ticks_to_pct_load ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py ticks_to_rad \u00b6 ticks_to_rad ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py ticks_to_rad_per_sec \u00b6 ticks_to_rad_per_sec ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py ticks_to_rad_per_sec_sec \u00b6 ticks_to_rad_per_sec_sec ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py ticks_to_world_rad \u00b6 ticks_to_world_rad ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py ticks_to_world_rad_per_sec \u00b6 ticks_to_world_rad_per_sec ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py world_rad_to_ticks \u00b6 world_rad_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py","title":"dynamixel_hello_XL430"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#stretch_bodydynamixel_hello_xl430","text":"","title":"stretch_body.dynamixel_hello_XL430"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#class-dynamixelhelloxl430","text":"DynamixelHelloXL430 ( name , chain = None ) Source: stretch_body/dynamixel_hello_XL430.py Abstract the Dynamixel X-Series to handle calibration, radians, etc","title":"Class DynamixelHelloXL430"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#disable_torque","text":"disable_torque ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"disable_torque"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#do_ping","text":"do_ping ( self , verbose ) Source: stretch_body/dynamixel_hello_XL430.py","title":"do_ping"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#enable_pos","text":"enable_pos ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"enable_pos"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#enable_pwm","text":"enable_pwm ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"enable_pwm"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#enable_torque","text":"enable_torque ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"enable_torque"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#home","text":"home ( self , single_stop = False , move_to_zero = True , delay_at_stop = 0.0 ) Source: stretch_body/dynamixel_hello_XL430.py","title":"home"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#mark_zero","text":"mark_zero ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"mark_zero"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#move_by","text":"move_by ( self , x_des , v_des = None , a_des = None ) Source: stretch_body/dynamixel_hello_XL430.py","title":"move_by"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#move_to","text":"move_to ( self , x_des , v_des = None , a_des = None ) Source: stretch_body/dynamixel_hello_XL430.py","title":"move_to"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"pretty_print"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#pull_status","text":"pull_status ( self , data = None ) Source: stretch_body/dynamixel_hello_XL430.py","title":"pull_status"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#quick_stop","text":"quick_stop ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"quick_stop"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#rad_per_sec_sec_to_ticks","text":"rad_per_sec_sec_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py","title":"rad_per_sec_sec_to_ticks"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#rad_per_sec_to_ticks","text":"rad_per_sec_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py","title":"rad_per_sec_to_ticks"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#rad_to_ticks","text":"rad_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py","title":"rad_to_ticks"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#reboot","text":"reboot ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"reboot"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#set_motion_params","text":"set_motion_params ( self , v_des = None , a_des = None ) Source: stretch_body/dynamixel_hello_XL430.py","title":"set_motion_params"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#set_pwm","text":"set_pwm ( self , x ) Source: stretch_body/dynamixel_hello_XL430.py","title":"set_pwm"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#startup","text":"startup ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"startup"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#stop","text":"stop ( self ) Source: stretch_body/dynamixel_hello_XL430.py","title":"stop"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#ticks_to_pct_load","text":"ticks_to_pct_load ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py","title":"ticks_to_pct_load"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#ticks_to_rad","text":"ticks_to_rad ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py","title":"ticks_to_rad"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#ticks_to_rad_per_sec","text":"ticks_to_rad_per_sec ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py","title":"ticks_to_rad_per_sec"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#ticks_to_rad_per_sec_sec","text":"ticks_to_rad_per_sec_sec ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py","title":"ticks_to_rad_per_sec_sec"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#ticks_to_world_rad","text":"ticks_to_world_rad ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py","title":"ticks_to_world_rad"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#ticks_to_world_rad_per_sec","text":"ticks_to_world_rad_per_sec ( self , t ) Source: stretch_body/dynamixel_hello_XL430.py","title":"ticks_to_world_rad_per_sec"},{"location":"stable/stretch_body/dynamixel_hello_XL430/#world_rad_to_ticks","text":"world_rad_to_ticks ( self , r ) Source: stretch_body/dynamixel_hello_XL430.py","title":"world_rad_to_ticks"},{"location":"stable/stretch_body/end_of_arm/","text":"stretch_body.end_of_arm \u00b6 Class EndOfArm \u00b6 EndOfArm () Source: stretch_body/end_of_arm.py The EndOfArm class allows for an extensible serial chain of Dynamixel X series devices It allows the specifc type of device to be declared at runtime via the Yaml parameters In this way, a user can add their own custom Dynamixel based tools to the robot end-of-arm by simply deriving it from DynamixelHelloXL430 and declaring the class name / Python module name in the User YAML file Methods \u00b6 home \u00b6 home ( self , joint ) Source: stretch_body/end_of_arm.py Home to hardstops is_tool_present \u00b6 is_tool_present ( self , class_name ) Source: stretch_body/end_of_arm.py Return true if the given tool type is present (eg. StretchGripper) Allows for conditional logic when switching end-of-arm tools move_by \u00b6 move_by ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/end_of_arm.py joint: name of joint (string) x_r: commanded incremental motion (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2) move_to \u00b6 move_to ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/end_of_arm.py joint: name of joint (string) x_r: commanded absolute position (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2) pose \u00b6 pose ( self , joint , p , v_r = None , a_r = None ) Source: stretch_body/end_of_arm.py joint: name of joint (string) p: named pose of joint v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"end_of_arm"},{"location":"stable/stretch_body/end_of_arm/#stretch_bodyend_of_arm","text":"","title":"stretch_body.end_of_arm"},{"location":"stable/stretch_body/end_of_arm/#class-endofarm","text":"EndOfArm () Source: stretch_body/end_of_arm.py The EndOfArm class allows for an extensible serial chain of Dynamixel X series devices It allows the specifc type of device to be declared at runtime via the Yaml parameters In this way, a user can add their own custom Dynamixel based tools to the robot end-of-arm by simply deriving it from DynamixelHelloXL430 and declaring the class name / Python module name in the User YAML file","title":"Class EndOfArm"},{"location":"stable/stretch_body/end_of_arm/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/end_of_arm/#home","text":"home ( self , joint ) Source: stretch_body/end_of_arm.py Home to hardstops","title":"home"},{"location":"stable/stretch_body/end_of_arm/#is_tool_present","text":"is_tool_present ( self , class_name ) Source: stretch_body/end_of_arm.py Return true if the given tool type is present (eg. StretchGripper) Allows for conditional logic when switching end-of-arm tools","title":"is_tool_present"},{"location":"stable/stretch_body/end_of_arm/#move_by","text":"move_by ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/end_of_arm.py joint: name of joint (string) x_r: commanded incremental motion (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"move_by"},{"location":"stable/stretch_body/end_of_arm/#move_to","text":"move_to ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/end_of_arm.py joint: name of joint (string) x_r: commanded absolute position (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"move_to"},{"location":"stable/stretch_body/end_of_arm/#pose","text":"pose ( self , joint , p , v_r = None , a_r = None ) Source: stretch_body/end_of_arm.py joint: name of joint (string) p: named pose of joint v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"pose"},{"location":"stable/stretch_body/head/","text":"stretch_body.head \u00b6 Class Head \u00b6 Head () Source: stretch_body/head.py API to the Stretch RE1 Head Methods \u00b6 home \u00b6 home ( self , joint ) Source: stretch_body/head.py move_by \u00b6 move_by ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/head.py joint: Name of the joint to move ('head_pan' or 'head_tilt') x_r: commanded incremental motion (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2) move_to \u00b6 move_to ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/head.py joint: Name of the joint to move ('head_pan' or 'head_tilt') x_r: commanded absolute position (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2) pose \u00b6 pose ( self , p , v_r = [ None , None ], a_r = [ None , None ]) Source: stretch_body/head.py p: Dictionary key to named pose (eg 'ahead') v_r: list, velocities for trapezoidal motion profile (rad/s). a_r: list, accelerations for trapezoidal motion profile (rad/s^2)","title":"head"},{"location":"stable/stretch_body/head/#stretch_bodyhead","text":"","title":"stretch_body.head"},{"location":"stable/stretch_body/head/#class-head","text":"Head () Source: stretch_body/head.py API to the Stretch RE1 Head","title":"Class Head"},{"location":"stable/stretch_body/head/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/head/#home","text":"home ( self , joint ) Source: stretch_body/head.py","title":"home"},{"location":"stable/stretch_body/head/#move_by","text":"move_by ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/head.py joint: Name of the joint to move ('head_pan' or 'head_tilt') x_r: commanded incremental motion (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"move_by"},{"location":"stable/stretch_body/head/#move_to","text":"move_to ( self , joint , x_r , v_r = None , a_r = None ) Source: stretch_body/head.py joint: Name of the joint to move ('head_pan' or 'head_tilt') x_r: commanded absolute position (radians). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"move_to"},{"location":"stable/stretch_body/head/#pose","text":"pose ( self , p , v_r = [ None , None ], a_r = [ None , None ]) Source: stretch_body/head.py p: Dictionary key to named pose (eg 'ahead') v_r: list, velocities for trapezoidal motion profile (rad/s). a_r: list, accelerations for trapezoidal motion profile (rad/s^2)","title":"pose"},{"location":"stable/stretch_body/hello_utils/","text":"stretch_body.hello_utils \u00b6 Class ThreadServiceExit \u00b6 Source: stretch_body/hello_utils.py Custom exception which is used to trigger the clean exit of all running threads and the main program. Class TimerStats \u00b6 TimerStats () Source: stretch_body/hello_utils.py Methods \u00b6 output_string \u00b6 output_string ( self ) Source: stretch_body/hello_utils.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/hello_utils.py update \u00b6 update ( self , duration ) Source: stretch_body/hello_utils.py create_time_string \u00b6 create_time_string () Source: stretch_body/hello_utils.py deg_to_rad \u00b6 deg_to_rad ( x ) Source: stretch_body/hello_utils.py get_fleet_directory \u00b6 get_fleet_directory () Source: stretch_body/hello_utils.py get_fleet_id \u00b6 get_fleet_id () Source: stretch_body/hello_utils.py rad_to_deg \u00b6 rad_to_deg ( x ) Source: stretch_body/hello_utils.py read_fleet_yaml \u00b6 read_fleet_yaml ( fn ) Source: stretch_body/hello_utils.py set_fleet_id \u00b6 set_fleet_id ( id ) Source: stretch_body/hello_utils.py thread_service_shutdown \u00b6 thread_service_shutdown ( signum , frame ) Source: stretch_body/hello_utils.py write_fleet_yaml \u00b6 write_fleet_yaml ( fn , rp ) Source: stretch_body/hello_utils.py","title":"hello_utils"},{"location":"stable/stretch_body/hello_utils/#stretch_bodyhello_utils","text":"","title":"stretch_body.hello_utils"},{"location":"stable/stretch_body/hello_utils/#class-threadserviceexit","text":"Source: stretch_body/hello_utils.py Custom exception which is used to trigger the clean exit of all running threads and the main program.","title":"Class ThreadServiceExit"},{"location":"stable/stretch_body/hello_utils/#class-timerstats","text":"TimerStats () Source: stretch_body/hello_utils.py","title":"Class TimerStats"},{"location":"stable/stretch_body/hello_utils/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/hello_utils/#output_string","text":"output_string ( self ) Source: stretch_body/hello_utils.py","title":"output_string"},{"location":"stable/stretch_body/hello_utils/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/hello_utils.py","title":"pretty_print"},{"location":"stable/stretch_body/hello_utils/#update","text":"update ( self , duration ) Source: stretch_body/hello_utils.py","title":"update"},{"location":"stable/stretch_body/hello_utils/#create_time_string","text":"create_time_string () Source: stretch_body/hello_utils.py","title":"create_time_string"},{"location":"stable/stretch_body/hello_utils/#deg_to_rad","text":"deg_to_rad ( x ) Source: stretch_body/hello_utils.py","title":"deg_to_rad"},{"location":"stable/stretch_body/hello_utils/#get_fleet_directory","text":"get_fleet_directory () Source: stretch_body/hello_utils.py","title":"get_fleet_directory"},{"location":"stable/stretch_body/hello_utils/#get_fleet_id","text":"get_fleet_id () Source: stretch_body/hello_utils.py","title":"get_fleet_id"},{"location":"stable/stretch_body/hello_utils/#rad_to_deg","text":"rad_to_deg ( x ) Source: stretch_body/hello_utils.py","title":"rad_to_deg"},{"location":"stable/stretch_body/hello_utils/#read_fleet_yaml","text":"read_fleet_yaml ( fn ) Source: stretch_body/hello_utils.py","title":"read_fleet_yaml"},{"location":"stable/stretch_body/hello_utils/#set_fleet_id","text":"set_fleet_id ( id ) Source: stretch_body/hello_utils.py","title":"set_fleet_id"},{"location":"stable/stretch_body/hello_utils/#thread_service_shutdown","text":"thread_service_shutdown ( signum , frame ) Source: stretch_body/hello_utils.py","title":"thread_service_shutdown"},{"location":"stable/stretch_body/hello_utils/#write_fleet_yaml","text":"write_fleet_yaml ( fn , rp ) Source: stretch_body/hello_utils.py","title":"write_fleet_yaml"},{"location":"stable/stretch_body/lift/","text":"stretch_body.lift \u00b6 Class Lift \u00b6 Lift () Source: stretch_body/lift.py API to the Stretch RE1 Lift Methods \u00b6 home \u00b6 home ( self , measuring = False ) Source: stretch_body/lift.py motor_current_to_translate_force \u00b6 motor_current_to_translate_force ( self , i ) Source: stretch_body/lift.py motor_rad_to_translate_m \u00b6 motor_rad_to_translate_m ( self , ang ) Source: stretch_body/lift.py move_by \u00b6 move_by ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/lift.py x_m: commanded incremental motion (meters). v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, up direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, down direction) req_calibration: Disallow motion prior to homing move_to \u00b6 move_to ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/lift.py x_m: commanded absolute position (meters). x_m=0 is down. x_m=~1.1 is up v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, up direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, down direction) req_calibration: Disallow motion prior to homing pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/lift.py pull_status \u00b6 pull_status ( self ) Source: stretch_body/lift.py push_command \u00b6 push_command ( self ) Source: stretch_body/lift.py startup \u00b6 startup ( self ) Source: stretch_body/lift.py stop \u00b6 stop ( self ) Source: stretch_body/lift.py translate_force_to_motor_current \u00b6 translate_force_to_motor_current ( self , f ) Source: stretch_body/lift.py translate_to_motor_rad \u00b6 translate_to_motor_rad ( self , lift_m ) Source: stretch_body/lift.py","title":"lift"},{"location":"stable/stretch_body/lift/#stretch_bodylift","text":"","title":"stretch_body.lift"},{"location":"stable/stretch_body/lift/#class-lift","text":"Lift () Source: stretch_body/lift.py API to the Stretch RE1 Lift","title":"Class Lift"},{"location":"stable/stretch_body/lift/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/lift/#home","text":"home ( self , measuring = False ) Source: stretch_body/lift.py","title":"home"},{"location":"stable/stretch_body/lift/#motor_current_to_translate_force","text":"motor_current_to_translate_force ( self , i ) Source: stretch_body/lift.py","title":"motor_current_to_translate_force"},{"location":"stable/stretch_body/lift/#motor_rad_to_translate_m","text":"motor_rad_to_translate_m ( self , ang ) Source: stretch_body/lift.py","title":"motor_rad_to_translate_m"},{"location":"stable/stretch_body/lift/#move_by","text":"move_by ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/lift.py x_m: commanded incremental motion (meters). v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, up direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, down direction) req_calibration: Disallow motion prior to homing","title":"move_by"},{"location":"stable/stretch_body/lift/#move_to","text":"move_to ( self , x_m , v_m = None , a_m = None , stiffness = None , contact_thresh_pos_N = None , contact_thresh_neg_N = None , req_calibration = True , ) Source: stretch_body/lift.py x_m: commanded absolute position (meters). x_m=0 is down. x_m=~1.1 is up v_m: velocity for trapezoidal motion profile (m/s) a_m: acceleration for trapezoidal motion profile (m/s^2) stiffness: stiffness of motion. Range 0.0 (min) to 1.0 (max) contact_thresh_pos_N: force threshold to stop motion (~Newtons, up direction) contact_thresh_neg_N: force threshold to stop motion (~Newtons, down direction) req_calibration: Disallow motion prior to homing","title":"move_to"},{"location":"stable/stretch_body/lift/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/lift.py","title":"pretty_print"},{"location":"stable/stretch_body/lift/#pull_status","text":"pull_status ( self ) Source: stretch_body/lift.py","title":"pull_status"},{"location":"stable/stretch_body/lift/#push_command","text":"push_command ( self ) Source: stretch_body/lift.py","title":"push_command"},{"location":"stable/stretch_body/lift/#startup","text":"startup ( self ) Source: stretch_body/lift.py","title":"startup"},{"location":"stable/stretch_body/lift/#stop","text":"stop ( self ) Source: stretch_body/lift.py","title":"stop"},{"location":"stable/stretch_body/lift/#translate_force_to_motor_current","text":"translate_force_to_motor_current ( self , f ) Source: stretch_body/lift.py","title":"translate_force_to_motor_current"},{"location":"stable/stretch_body/lift/#translate_to_motor_rad","text":"translate_to_motor_rad ( self , lift_m ) Source: stretch_body/lift.py","title":"translate_to_motor_rad"},{"location":"stable/stretch_body/pimu/","text":"stretch_body.pimu \u00b6 Class IMU \u00b6 IMU () Source: stretch_body/pimu.py API to the Stretch RE1 IMU found in the base Methods \u00b6 get_quaternion \u00b6 get_quaternion ( self ) Source: stretch_body/pimu.py get_status \u00b6 get_status ( self ) Source: stretch_body/pimu.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/pimu.py queue_rpc \u00b6 queue_rpc ( self , transport ) Source: stretch_body/pimu.py unpack_status \u00b6 unpack_status ( self , s ) Source: stretch_body/pimu.py Class Pimu \u00b6 Pimu ( verbose = False , event_reset = True ) Source: stretch_body/pimu.py API to the Stretch RE1 Power and IMU board (Pimu) Methods \u00b6 board_reset \u00b6 board_reset ( self ) Source: stretch_body/pimu.py cliff_event_reset \u00b6 cliff_event_reset ( self ) Source: stretch_body/pimu.py get_cpu_temp \u00b6 get_cpu_temp ( self ) Source: stretch_body/pimu.py get_current \u00b6 get_current ( self , raw ) Source: stretch_body/pimu.py get_temp \u00b6 get_temp ( self , raw ) Source: stretch_body/pimu.py get_voltage \u00b6 get_voltage ( self , raw ) Source: stretch_body/pimu.py imu_reset \u00b6 imu_reset ( self ) Source: stretch_body/pimu.py pack_config \u00b6 pack_config ( self , s , sidx ) Source: stretch_body/pimu.py pack_trigger \u00b6 pack_trigger ( self , s , sidx ) Source: stretch_body/pimu.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/pimu.py pull_status \u00b6 pull_status ( self , exiting = False ) Source: stretch_body/pimu.py push_command \u00b6 push_command ( self , exiting = False ) Source: stretch_body/pimu.py rpc_board_info_reply \u00b6 rpc_board_info_reply ( self , reply ) Source: stretch_body/pimu.py rpc_config_reply \u00b6 rpc_config_reply ( self , reply ) Source: stretch_body/pimu.py rpc_motor_sync_reply \u00b6 rpc_motor_sync_reply ( self , reply ) Source: stretch_body/pimu.py rpc_status_reply \u00b6 rpc_status_reply ( self , reply ) Source: stretch_body/pimu.py rpc_trigger_reply \u00b6 rpc_trigger_reply ( self , reply ) Source: stretch_body/pimu.py runstop_event_reset \u00b6 runstop_event_reset ( self ) Source: stretch_body/pimu.py Reset the robot runstop, allowing motion to continue runstop_event_trigger \u00b6 runstop_event_trigger ( self ) Source: stretch_body/pimu.py Trigger the robot runstop, stopping motion set_buzzer_off \u00b6 set_buzzer_off ( self ) Source: stretch_body/pimu.py set_buzzer_on \u00b6 set_buzzer_on ( self ) Source: stretch_body/pimu.py set_fan_off \u00b6 set_fan_off ( self ) Source: stretch_body/pimu.py set_fan_on \u00b6 set_fan_on ( self ) Source: stretch_body/pimu.py startup \u00b6 startup ( self ) Source: stretch_body/pimu.py step_sentry \u00b6 step_sentry ( self , id ) Source: stretch_body/pimu.py stop \u00b6 stop ( self ) Source: stretch_body/pimu.py trigger_beep \u00b6 trigger_beep ( self ) Source: stretch_body/pimu.py Generate a single short beep trigger_motor_sync \u00b6 trigger_motor_sync ( self ) Source: stretch_body/pimu.py unpack_board_info \u00b6 unpack_board_info ( self , s ) Source: stretch_body/pimu.py unpack_status \u00b6 unpack_status ( self , s ) Source: stretch_body/pimu.py","title":"pimu"},{"location":"stable/stretch_body/pimu/#stretch_bodypimu","text":"","title":"stretch_body.pimu"},{"location":"stable/stretch_body/pimu/#class-imu","text":"IMU () Source: stretch_body/pimu.py API to the Stretch RE1 IMU found in the base","title":"Class IMU"},{"location":"stable/stretch_body/pimu/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/pimu/#get_quaternion","text":"get_quaternion ( self ) Source: stretch_body/pimu.py","title":"get_quaternion"},{"location":"stable/stretch_body/pimu/#get_status","text":"get_status ( self ) Source: stretch_body/pimu.py","title":"get_status"},{"location":"stable/stretch_body/pimu/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/pimu.py","title":"pretty_print"},{"location":"stable/stretch_body/pimu/#queue_rpc","text":"queue_rpc ( self , transport ) Source: stretch_body/pimu.py","title":"queue_rpc"},{"location":"stable/stretch_body/pimu/#unpack_status","text":"unpack_status ( self , s ) Source: stretch_body/pimu.py","title":"unpack_status"},{"location":"stable/stretch_body/pimu/#class-pimu","text":"Pimu ( verbose = False , event_reset = True ) Source: stretch_body/pimu.py API to the Stretch RE1 Power and IMU board (Pimu)","title":"Class Pimu"},{"location":"stable/stretch_body/pimu/#methods_1","text":"","title":"Methods"},{"location":"stable/stretch_body/pimu/#board_reset","text":"board_reset ( self ) Source: stretch_body/pimu.py","title":"board_reset"},{"location":"stable/stretch_body/pimu/#cliff_event_reset","text":"cliff_event_reset ( self ) Source: stretch_body/pimu.py","title":"cliff_event_reset"},{"location":"stable/stretch_body/pimu/#get_cpu_temp","text":"get_cpu_temp ( self ) Source: stretch_body/pimu.py","title":"get_cpu_temp"},{"location":"stable/stretch_body/pimu/#get_current","text":"get_current ( self , raw ) Source: stretch_body/pimu.py","title":"get_current"},{"location":"stable/stretch_body/pimu/#get_temp","text":"get_temp ( self , raw ) Source: stretch_body/pimu.py","title":"get_temp"},{"location":"stable/stretch_body/pimu/#get_voltage","text":"get_voltage ( self , raw ) Source: stretch_body/pimu.py","title":"get_voltage"},{"location":"stable/stretch_body/pimu/#imu_reset","text":"imu_reset ( self ) Source: stretch_body/pimu.py","title":"imu_reset"},{"location":"stable/stretch_body/pimu/#pack_config","text":"pack_config ( self , s , sidx ) Source: stretch_body/pimu.py","title":"pack_config"},{"location":"stable/stretch_body/pimu/#pack_trigger","text":"pack_trigger ( self , s , sidx ) Source: stretch_body/pimu.py","title":"pack_trigger"},{"location":"stable/stretch_body/pimu/#pretty_print_1","text":"pretty_print ( self ) Source: stretch_body/pimu.py","title":"pretty_print"},{"location":"stable/stretch_body/pimu/#pull_status","text":"pull_status ( self , exiting = False ) Source: stretch_body/pimu.py","title":"pull_status"},{"location":"stable/stretch_body/pimu/#push_command","text":"push_command ( self , exiting = False ) Source: stretch_body/pimu.py","title":"push_command"},{"location":"stable/stretch_body/pimu/#rpc_board_info_reply","text":"rpc_board_info_reply ( self , reply ) Source: stretch_body/pimu.py","title":"rpc_board_info_reply"},{"location":"stable/stretch_body/pimu/#rpc_config_reply","text":"rpc_config_reply ( self , reply ) Source: stretch_body/pimu.py","title":"rpc_config_reply"},{"location":"stable/stretch_body/pimu/#rpc_motor_sync_reply","text":"rpc_motor_sync_reply ( self , reply ) Source: stretch_body/pimu.py","title":"rpc_motor_sync_reply"},{"location":"stable/stretch_body/pimu/#rpc_status_reply","text":"rpc_status_reply ( self , reply ) Source: stretch_body/pimu.py","title":"rpc_status_reply"},{"location":"stable/stretch_body/pimu/#rpc_trigger_reply","text":"rpc_trigger_reply ( self , reply ) Source: stretch_body/pimu.py","title":"rpc_trigger_reply"},{"location":"stable/stretch_body/pimu/#runstop_event_reset","text":"runstop_event_reset ( self ) Source: stretch_body/pimu.py Reset the robot runstop, allowing motion to continue","title":"runstop_event_reset"},{"location":"stable/stretch_body/pimu/#runstop_event_trigger","text":"runstop_event_trigger ( self ) Source: stretch_body/pimu.py Trigger the robot runstop, stopping motion","title":"runstop_event_trigger"},{"location":"stable/stretch_body/pimu/#set_buzzer_off","text":"set_buzzer_off ( self ) Source: stretch_body/pimu.py","title":"set_buzzer_off"},{"location":"stable/stretch_body/pimu/#set_buzzer_on","text":"set_buzzer_on ( self ) Source: stretch_body/pimu.py","title":"set_buzzer_on"},{"location":"stable/stretch_body/pimu/#set_fan_off","text":"set_fan_off ( self ) Source: stretch_body/pimu.py","title":"set_fan_off"},{"location":"stable/stretch_body/pimu/#set_fan_on","text":"set_fan_on ( self ) Source: stretch_body/pimu.py","title":"set_fan_on"},{"location":"stable/stretch_body/pimu/#startup","text":"startup ( self ) Source: stretch_body/pimu.py","title":"startup"},{"location":"stable/stretch_body/pimu/#step_sentry","text":"step_sentry ( self , id ) Source: stretch_body/pimu.py","title":"step_sentry"},{"location":"stable/stretch_body/pimu/#stop","text":"stop ( self ) Source: stretch_body/pimu.py","title":"stop"},{"location":"stable/stretch_body/pimu/#trigger_beep","text":"trigger_beep ( self ) Source: stretch_body/pimu.py Generate a single short beep","title":"trigger_beep"},{"location":"stable/stretch_body/pimu/#trigger_motor_sync","text":"trigger_motor_sync ( self ) Source: stretch_body/pimu.py","title":"trigger_motor_sync"},{"location":"stable/stretch_body/pimu/#unpack_board_info","text":"unpack_board_info ( self , s ) Source: stretch_body/pimu.py","title":"unpack_board_info"},{"location":"stable/stretch_body/pimu/#unpack_status_1","text":"unpack_status ( self , s ) Source: stretch_body/pimu.py","title":"unpack_status"},{"location":"stable/stretch_body/robot/","text":"stretch_body.robot \u00b6 Class Robot \u00b6 Robot () Source: stretch_body/robot.py API to the Stretch RE1 Robot Methods \u00b6 get_status \u00b6 get_status ( self ) Source: stretch_body/robot.py Thread safe and atomic read of current Robot status data Returns as a dict. home \u00b6 home ( self ) Source: stretch_body/robot.py Cause the robot to home its joints by moving to hardstops Blocking. is_calibrated \u00b6 is_calibrated ( self ) Source: stretch_body/robot.py Returns true if homing-calibration has been run all joints that require it pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/robot.py push_command \u00b6 push_command ( self ) Source: stretch_body/robot.py Cause all queued up RPC commands to be sent down to Devices startup \u00b6 startup ( self ) Source: stretch_body/robot.py To be called once after class instantiation. Prepares devices for communications and motion stop \u00b6 stop ( self ) Source: stretch_body/robot.py To be called once before exiting a program Cleanly stops down motion and communication stow \u00b6 stow ( self ) Source: stretch_body/robot.py Cause the robot to move to its stow position Blocking. Class RobotDynamixelThread \u00b6 RobotDynamixelThread ( robot ) Source: stretch_body/robot.py This thread polls the status data of the Dynamixel devices at 15Hz Attributes \u00b6 daemon ident name Methods \u00b6 run \u00b6 run ( self ) Source: stretch_body/robot.py Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively. daemon \u00b6 daemon Source: threading.py A boolean value indicating whether this thread is a daemon thread. This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False. The entire Python program exits when only daemon threads are left. ident \u00b6 ident Source: threading.py Thread identifier of this thread or None if it has not been started. This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited. name \u00b6 name Source: threading.py A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor. Class RobotThread \u00b6 RobotThread ( robot ) Source: stretch_body/robot.py This thread runs at 25Hz. It updates the status data of the Devices. It also steps the Sentry and Monitor functions Attributes \u00b6 daemon ident name Methods \u00b6 run \u00b6 run ( self ) Source: stretch_body/robot.py Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively. daemon \u00b6 daemon Source: threading.py A boolean value indicating whether this thread is a daemon thread. This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False. The entire Python program exits when only daemon threads are left. ident \u00b6 ident Source: threading.py Thread identifier of this thread or None if it has not been started. This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited. name \u00b6 name Source: threading.py A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.","title":"robot"},{"location":"stable/stretch_body/robot/#stretch_bodyrobot","text":"","title":"stretch_body.robot"},{"location":"stable/stretch_body/robot/#class-robot","text":"Robot () Source: stretch_body/robot.py API to the Stretch RE1 Robot","title":"Class Robot"},{"location":"stable/stretch_body/robot/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/robot/#get_status","text":"get_status ( self ) Source: stretch_body/robot.py Thread safe and atomic read of current Robot status data Returns as a dict.","title":"get_status"},{"location":"stable/stretch_body/robot/#home","text":"home ( self ) Source: stretch_body/robot.py Cause the robot to home its joints by moving to hardstops Blocking.","title":"home"},{"location":"stable/stretch_body/robot/#is_calibrated","text":"is_calibrated ( self ) Source: stretch_body/robot.py Returns true if homing-calibration has been run all joints that require it","title":"is_calibrated"},{"location":"stable/stretch_body/robot/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/robot.py","title":"pretty_print"},{"location":"stable/stretch_body/robot/#push_command","text":"push_command ( self ) Source: stretch_body/robot.py Cause all queued up RPC commands to be sent down to Devices","title":"push_command"},{"location":"stable/stretch_body/robot/#startup","text":"startup ( self ) Source: stretch_body/robot.py To be called once after class instantiation. Prepares devices for communications and motion","title":"startup"},{"location":"stable/stretch_body/robot/#stop","text":"stop ( self ) Source: stretch_body/robot.py To be called once before exiting a program Cleanly stops down motion and communication","title":"stop"},{"location":"stable/stretch_body/robot/#stow","text":"stow ( self ) Source: stretch_body/robot.py Cause the robot to move to its stow position Blocking.","title":"stow"},{"location":"stable/stretch_body/robot/#class-robotdynamixelthread","text":"RobotDynamixelThread ( robot ) Source: stretch_body/robot.py This thread polls the status data of the Dynamixel devices at 15Hz","title":"Class RobotDynamixelThread"},{"location":"stable/stretch_body/robot/#attributes","text":"daemon ident name","title":"Attributes"},{"location":"stable/stretch_body/robot/#methods_1","text":"","title":"Methods"},{"location":"stable/stretch_body/robot/#run","text":"run ( self ) Source: stretch_body/robot.py Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.","title":"run"},{"location":"stable/stretch_body/robot/#daemon","text":"daemon Source: threading.py A boolean value indicating whether this thread is a daemon thread. This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False. The entire Python program exits when only daemon threads are left.","title":"daemon"},{"location":"stable/stretch_body/robot/#ident","text":"ident Source: threading.py Thread identifier of this thread or None if it has not been started. This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited.","title":"ident"},{"location":"stable/stretch_body/robot/#name","text":"name Source: threading.py A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.","title":"name"},{"location":"stable/stretch_body/robot/#class-robotthread","text":"RobotThread ( robot ) Source: stretch_body/robot.py This thread runs at 25Hz. It updates the status data of the Devices. It also steps the Sentry and Monitor functions","title":"Class RobotThread"},{"location":"stable/stretch_body/robot/#attributes_1","text":"daemon ident name","title":"Attributes"},{"location":"stable/stretch_body/robot/#methods_2","text":"","title":"Methods"},{"location":"stable/stretch_body/robot/#run_1","text":"run ( self ) Source: stretch_body/robot.py Method representing the thread's activity. You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.","title":"run"},{"location":"stable/stretch_body/robot/#daemon_1","text":"daemon Source: threading.py A boolean value indicating whether this thread is a daemon thread. This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False. The entire Python program exits when only daemon threads are left.","title":"daemon"},{"location":"stable/stretch_body/robot/#ident_1","text":"ident Source: threading.py Thread identifier of this thread or None if it has not been started. This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited.","title":"ident"},{"location":"stable/stretch_body/robot/#name_1","text":"name Source: threading.py A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.","title":"name"},{"location":"stable/stretch_body/robot_monitor/","text":"stretch_body.robot_monitor \u00b6 Class RobotMonitor \u00b6 RobotMonitor ( robot ) Source: stretch_body/robot_monitor.py The RobotMonitor class provide system level monitoring of Status data for important events. These events are logged to file (and optionally console) The events to be monitored may be turned on/off/configured via YAML The RobotMonitor is managed by the Robot class It runs at 5Hz Methods \u00b6 monitor_base_bump_event \u00b6 monitor_base_bump_event ( self ) Source: stretch_body/robot_monitor.py monitor_base_cliff_event \u00b6 monitor_base_cliff_event ( self ) Source: stretch_body/robot_monitor.py monitor_current \u00b6 monitor_current ( self ) Source: stretch_body/robot_monitor.py monitor_dynamixel_flags \u00b6 monitor_dynamixel_flags ( self ) Source: stretch_body/robot_monitor.py monitor_guarded_contact \u00b6 monitor_guarded_contact ( self ) Source: stretch_body/robot_monitor.py monitor_over_tilt_alert \u00b6 monitor_over_tilt_alert ( self ) Source: stretch_body/robot_monitor.py monitor_runstop \u00b6 monitor_runstop ( self ) Source: stretch_body/robot_monitor.py monitor_voltage \u00b6 monitor_voltage ( self ) Source: stretch_body/robot_monitor.py monitor_wrist_single_tap \u00b6 monitor_wrist_single_tap ( self ) Source: stretch_body/robot_monitor.py startup \u00b6 startup ( self ) Source: stretch_body/robot_monitor.py step \u00b6 step ( self ) Source: stretch_body/robot_monitor.py","title":"robot_monitor"},{"location":"stable/stretch_body/robot_monitor/#stretch_bodyrobot_monitor","text":"","title":"stretch_body.robot_monitor"},{"location":"stable/stretch_body/robot_monitor/#class-robotmonitor","text":"RobotMonitor ( robot ) Source: stretch_body/robot_monitor.py The RobotMonitor class provide system level monitoring of Status data for important events. These events are logged to file (and optionally console) The events to be monitored may be turned on/off/configured via YAML The RobotMonitor is managed by the Robot class It runs at 5Hz","title":"Class RobotMonitor"},{"location":"stable/stretch_body/robot_monitor/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/robot_monitor/#monitor_base_bump_event","text":"monitor_base_bump_event ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_base_bump_event"},{"location":"stable/stretch_body/robot_monitor/#monitor_base_cliff_event","text":"monitor_base_cliff_event ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_base_cliff_event"},{"location":"stable/stretch_body/robot_monitor/#monitor_current","text":"monitor_current ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_current"},{"location":"stable/stretch_body/robot_monitor/#monitor_dynamixel_flags","text":"monitor_dynamixel_flags ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_dynamixel_flags"},{"location":"stable/stretch_body/robot_monitor/#monitor_guarded_contact","text":"monitor_guarded_contact ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_guarded_contact"},{"location":"stable/stretch_body/robot_monitor/#monitor_over_tilt_alert","text":"monitor_over_tilt_alert ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_over_tilt_alert"},{"location":"stable/stretch_body/robot_monitor/#monitor_runstop","text":"monitor_runstop ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_runstop"},{"location":"stable/stretch_body/robot_monitor/#monitor_voltage","text":"monitor_voltage ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_voltage"},{"location":"stable/stretch_body/robot_monitor/#monitor_wrist_single_tap","text":"monitor_wrist_single_tap ( self ) Source: stretch_body/robot_monitor.py","title":"monitor_wrist_single_tap"},{"location":"stable/stretch_body/robot_monitor/#startup","text":"startup ( self ) Source: stretch_body/robot_monitor.py","title":"startup"},{"location":"stable/stretch_body/robot_monitor/#step","text":"step ( self ) Source: stretch_body/robot_monitor.py","title":"step"},{"location":"stable/stretch_body/robot_sentry/","text":"stretch_body.robot_sentry \u00b6 Class RobotSentry \u00b6 RobotSentry ( robot ) Source: stretch_body/robot_sentry.py The RobotSentry class allows Devices to keep hardware within safe operating conditions. It is managed by the Robot class, allowing for system level Status data to inform the local Device controller context Devices that implement Sentry functions may override user control targets to ensure safe operation Sentry functions may be turn on/off/configured via YAML It runs at 12.5Hz Methods \u00b6 startup \u00b6 startup ( self ) Source: stretch_body/robot_sentry.py step \u00b6 step ( self ) Source: stretch_body/robot_sentry.py","title":"robot_sentry"},{"location":"stable/stretch_body/robot_sentry/#stretch_bodyrobot_sentry","text":"","title":"stretch_body.robot_sentry"},{"location":"stable/stretch_body/robot_sentry/#class-robotsentry","text":"RobotSentry ( robot ) Source: stretch_body/robot_sentry.py The RobotSentry class allows Devices to keep hardware within safe operating conditions. It is managed by the Robot class, allowing for system level Status data to inform the local Device controller context Devices that implement Sentry functions may override user control targets to ensure safe operation Sentry functions may be turn on/off/configured via YAML It runs at 12.5Hz","title":"Class RobotSentry"},{"location":"stable/stretch_body/robot_sentry/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/robot_sentry/#startup","text":"startup ( self ) Source: stretch_body/robot_sentry.py","title":"startup"},{"location":"stable/stretch_body/robot_sentry/#step","text":"step ( self ) Source: stretch_body/robot_sentry.py","title":"step"},{"location":"stable/stretch_body/scope/","text":"stretch_body.scope \u00b6 Class Scope \u00b6 Scope ( num_points = 100 , yrange = None , title = \"Scope\" ) Source: stretch_body/scope.py Simple oscilliscope visualization of a data stream Methods \u00b6 close \u00b6 close ( self ) Source: stretch_body/scope.py draw_array \u00b6 draw_array ( self , v ) Source: stretch_body/scope.py make_fig \u00b6 make_fig ( self ) Source: stretch_body/scope.py step_display \u00b6 step_display ( self , new_val ) Source: stretch_body/scope.py Class Scope4 \u00b6 Scope4 ( num_points = 100 , yrange = None , title = \"Scope\" ) Source: stretch_body/scope.py Simple 4ch oscilliscope visualization of a data stream Methods \u00b6 close \u00b6 close ( self ) Source: stretch_body/scope.py draw_array \u00b6 draw_array ( self , y1 , y2 , y3 , y4 ) Source: stretch_body/scope.py draw_array_xy \u00b6 draw_array_xy ( self , x1 , x2 , x3 , x4 , y1 , y2 , y3 , y4 ) Source: stretch_body/scope.py make_fig \u00b6 make_fig ( self ) Source: stretch_body/scope.py make_fig_xy \u00b6 make_fig_xy ( self ) Source: stretch_body/scope.py step_display \u00b6 step_display ( self , y1 , y2 , y3 , y4 ) Source: stretch_body/scope.py","title":"scope"},{"location":"stable/stretch_body/scope/#stretch_bodyscope","text":"","title":"stretch_body.scope"},{"location":"stable/stretch_body/scope/#class-scope","text":"Scope ( num_points = 100 , yrange = None , title = \"Scope\" ) Source: stretch_body/scope.py Simple oscilliscope visualization of a data stream","title":"Class Scope"},{"location":"stable/stretch_body/scope/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/scope/#close","text":"close ( self ) Source: stretch_body/scope.py","title":"close"},{"location":"stable/stretch_body/scope/#draw_array","text":"draw_array ( self , v ) Source: stretch_body/scope.py","title":"draw_array"},{"location":"stable/stretch_body/scope/#make_fig","text":"make_fig ( self ) Source: stretch_body/scope.py","title":"make_fig"},{"location":"stable/stretch_body/scope/#step_display","text":"step_display ( self , new_val ) Source: stretch_body/scope.py","title":"step_display"},{"location":"stable/stretch_body/scope/#class-scope4","text":"Scope4 ( num_points = 100 , yrange = None , title = \"Scope\" ) Source: stretch_body/scope.py Simple 4ch oscilliscope visualization of a data stream","title":"Class Scope4"},{"location":"stable/stretch_body/scope/#methods_1","text":"","title":"Methods"},{"location":"stable/stretch_body/scope/#close_1","text":"close ( self ) Source: stretch_body/scope.py","title":"close"},{"location":"stable/stretch_body/scope/#draw_array_1","text":"draw_array ( self , y1 , y2 , y3 , y4 ) Source: stretch_body/scope.py","title":"draw_array"},{"location":"stable/stretch_body/scope/#draw_array_xy","text":"draw_array_xy ( self , x1 , x2 , x3 , x4 , y1 , y2 , y3 , y4 ) Source: stretch_body/scope.py","title":"draw_array_xy"},{"location":"stable/stretch_body/scope/#make_fig_1","text":"make_fig ( self ) Source: stretch_body/scope.py","title":"make_fig"},{"location":"stable/stretch_body/scope/#make_fig_xy","text":"make_fig_xy ( self ) Source: stretch_body/scope.py","title":"make_fig_xy"},{"location":"stable/stretch_body/scope/#step_display_1","text":"step_display ( self , y1 , y2 , y3 , y4 ) Source: stretch_body/scope.py","title":"step_display"},{"location":"stable/stretch_body/stepper/","text":"stretch_body.stepper \u00b6 Class Stepper \u00b6 Stepper ( usb , verbose = False ) Source: stretch_body/stepper.py API to the Stretch RE1 stepper board Methods \u00b6 board_reset \u00b6 board_reset ( self ) Source: stretch_body/stepper.py current_to_effort \u00b6 current_to_effort ( self , i_A ) Source: stretch_body/stepper.py current_to_torque \u00b6 current_to_torque ( self , i ) Source: stretch_body/stepper.py disable_guarded_mode \u00b6 disable_guarded_mode ( self ) Source: stretch_body/stepper.py disable_runstop \u00b6 disable_runstop ( self ) Source: stretch_body/stepper.py disable_sync_mode \u00b6 disable_sync_mode ( self ) Source: stretch_body/stepper.py effort_to_current \u00b6 effort_to_current ( self , e ) Source: stretch_body/stepper.py enable_current \u00b6 enable_current ( self ) Source: stretch_body/stepper.py enable_freewheel \u00b6 enable_freewheel ( self ) Source: stretch_body/stepper.py enable_guarded_mode \u00b6 enable_guarded_mode ( self ) Source: stretch_body/stepper.py enable_hold \u00b6 enable_hold ( self ) Source: stretch_body/stepper.py enable_pos_pid \u00b6 enable_pos_pid ( self ) Source: stretch_body/stepper.py enable_pos_traj \u00b6 enable_pos_traj ( self ) Source: stretch_body/stepper.py enable_pos_traj_incr \u00b6 enable_pos_traj_incr ( self ) Source: stretch_body/stepper.py enable_runstop \u00b6 enable_runstop ( self ) Source: stretch_body/stepper.py enable_safety \u00b6 enable_safety ( self ) Source: stretch_body/stepper.py enable_sync_mode \u00b6 enable_sync_mode ( self ) Source: stretch_body/stepper.py enable_vel_pid \u00b6 enable_vel_pid ( self ) Source: stretch_body/stepper.py enable_vel_traj \u00b6 enable_vel_traj ( self ) Source: stretch_body/stepper.py get_chip_id \u00b6 get_chip_id ( self ) Source: stretch_body/stepper.py mark_position \u00b6 mark_position ( self , x ) Source: stretch_body/stepper.py menu_transaction \u00b6 menu_transaction ( self , x , do_print = True ) Source: stretch_body/stepper.py pack_command \u00b6 pack_command ( self , s , sidx ) Source: stretch_body/stepper.py pack_gains \u00b6 pack_gains ( self , s , sidx ) Source: stretch_body/stepper.py pack_motion_limits \u00b6 pack_motion_limits ( self , s , sidx ) Source: stretch_body/stepper.py pack_trigger \u00b6 pack_trigger ( self , s , sidx ) Source: stretch_body/stepper.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/stepper.py print_menu \u00b6 print_menu ( self ) Source: stretch_body/stepper.py pull_status \u00b6 pull_status ( self , exiting = False ) Source: stretch_body/stepper.py push_command \u00b6 push_command ( self , exiting = False ) Source: stretch_body/stepper.py read_encoder_calibration_from_YAML \u00b6 read_encoder_calibration_from_YAML ( self ) Source: stretch_body/stepper.py read_encoder_calibration_from_flash \u00b6 read_encoder_calibration_from_flash ( self ) Source: stretch_body/stepper.py read_gains_from_flash \u00b6 read_gains_from_flash ( self ) Source: stretch_body/stepper.py reset_motion_gen \u00b6 reset_motion_gen ( self ) Source: stretch_body/stepper.py reset_pos_calibrated \u00b6 reset_pos_calibrated ( self ) Source: stretch_body/stepper.py rpc_board_info_reply \u00b6 rpc_board_info_reply ( self , reply ) Source: stretch_body/stepper.py rpc_command_reply \u00b6 rpc_command_reply ( self , reply ) Source: stretch_body/stepper.py rpc_enc_calib_reply \u00b6 rpc_enc_calib_reply ( self , reply ) Source: stretch_body/stepper.py rpc_gains_reply \u00b6 rpc_gains_reply ( self , reply ) Source: stretch_body/stepper.py rpc_load_test_reply \u00b6 rpc_load_test_reply ( self , reply ) Source: stretch_body/stepper.py rpc_menu_on_reply \u00b6 rpc_menu_on_reply ( self , reply ) Source: stretch_body/stepper.py rpc_motion_limits_reply \u00b6 rpc_motion_limits_reply ( self , reply ) Source: stretch_body/stepper.py rpc_read_gains_from_flash_reply \u00b6 rpc_read_gains_from_flash_reply ( self , reply ) Source: stretch_body/stepper.py rpc_status_reply \u00b6 rpc_status_reply ( self , reply ) Source: stretch_body/stepper.py rpc_trigger_reply \u00b6 rpc_trigger_reply ( self , reply ) Source: stretch_body/stepper.py set_command \u00b6 set_command ( self , mode = None , x_des = None , v_des = None , a_des = None , i_des = None , stiffness = None , i_feedforward = None , i_contact_pos = None , i_contact_neg = None , ) Source: stretch_body/stepper.py set_gains \u00b6 set_gains ( self , g ) Source: stretch_body/stepper.py set_load_test \u00b6 set_load_test ( self ) Source: stretch_body/stepper.py set_motion_limits \u00b6 set_motion_limits ( self , limit_neg , limit_pos ) Source: stretch_body/stepper.py set_pos_calibrated \u00b6 set_pos_calibrated ( self ) Source: stretch_body/stepper.py startup \u00b6 startup ( self ) Source: stretch_body/stepper.py stop \u00b6 stop ( self ) Source: stretch_body/stepper.py torque_to_current \u00b6 torque_to_current ( self , tq ) Source: stretch_body/stepper.py turn_menu_interface_on \u00b6 turn_menu_interface_on ( self ) Source: stretch_body/stepper.py turn_rpc_interface_on \u00b6 turn_rpc_interface_on ( self ) Source: stretch_body/stepper.py unpack_board_info \u00b6 unpack_board_info ( self , s ) Source: stretch_body/stepper.py unpack_gains \u00b6 unpack_gains ( self , s ) Source: stretch_body/stepper.py unpack_status \u00b6 unpack_status ( self , s ) Source: stretch_body/stepper.py wait_until_at_setpoint \u00b6 wait_until_at_setpoint ( self , timeout = 15.0 ) Source: stretch_body/stepper.py write_encoder_calibration_to_YAML \u00b6 write_encoder_calibration_to_YAML ( self , data ) Source: stretch_body/stepper.py write_encoder_calibration_to_flash \u00b6 write_encoder_calibration_to_flash ( self , data ) Source: stretch_body/stepper.py write_gains_to_YAML \u00b6 write_gains_to_YAML ( self ) Source: stretch_body/stepper.py write_gains_to_flash \u00b6 write_gains_to_flash ( self ) Source: stretch_body/stepper.py","title":"stepper"},{"location":"stable/stretch_body/stepper/#stretch_bodystepper","text":"","title":"stretch_body.stepper"},{"location":"stable/stretch_body/stepper/#class-stepper","text":"Stepper ( usb , verbose = False ) Source: stretch_body/stepper.py API to the Stretch RE1 stepper board","title":"Class Stepper"},{"location":"stable/stretch_body/stepper/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/stepper/#board_reset","text":"board_reset ( self ) Source: stretch_body/stepper.py","title":"board_reset"},{"location":"stable/stretch_body/stepper/#current_to_effort","text":"current_to_effort ( self , i_A ) Source: stretch_body/stepper.py","title":"current_to_effort"},{"location":"stable/stretch_body/stepper/#current_to_torque","text":"current_to_torque ( self , i ) Source: stretch_body/stepper.py","title":"current_to_torque"},{"location":"stable/stretch_body/stepper/#disable_guarded_mode","text":"disable_guarded_mode ( self ) Source: stretch_body/stepper.py","title":"disable_guarded_mode"},{"location":"stable/stretch_body/stepper/#disable_runstop","text":"disable_runstop ( self ) Source: stretch_body/stepper.py","title":"disable_runstop"},{"location":"stable/stretch_body/stepper/#disable_sync_mode","text":"disable_sync_mode ( self ) Source: stretch_body/stepper.py","title":"disable_sync_mode"},{"location":"stable/stretch_body/stepper/#effort_to_current","text":"effort_to_current ( self , e ) Source: stretch_body/stepper.py","title":"effort_to_current"},{"location":"stable/stretch_body/stepper/#enable_current","text":"enable_current ( self ) Source: stretch_body/stepper.py","title":"enable_current"},{"location":"stable/stretch_body/stepper/#enable_freewheel","text":"enable_freewheel ( self ) Source: stretch_body/stepper.py","title":"enable_freewheel"},{"location":"stable/stretch_body/stepper/#enable_guarded_mode","text":"enable_guarded_mode ( self ) Source: stretch_body/stepper.py","title":"enable_guarded_mode"},{"location":"stable/stretch_body/stepper/#enable_hold","text":"enable_hold ( self ) Source: stretch_body/stepper.py","title":"enable_hold"},{"location":"stable/stretch_body/stepper/#enable_pos_pid","text":"enable_pos_pid ( self ) Source: stretch_body/stepper.py","title":"enable_pos_pid"},{"location":"stable/stretch_body/stepper/#enable_pos_traj","text":"enable_pos_traj ( self ) Source: stretch_body/stepper.py","title":"enable_pos_traj"},{"location":"stable/stretch_body/stepper/#enable_pos_traj_incr","text":"enable_pos_traj_incr ( self ) Source: stretch_body/stepper.py","title":"enable_pos_traj_incr"},{"location":"stable/stretch_body/stepper/#enable_runstop","text":"enable_runstop ( self ) Source: stretch_body/stepper.py","title":"enable_runstop"},{"location":"stable/stretch_body/stepper/#enable_safety","text":"enable_safety ( self ) Source: stretch_body/stepper.py","title":"enable_safety"},{"location":"stable/stretch_body/stepper/#enable_sync_mode","text":"enable_sync_mode ( self ) Source: stretch_body/stepper.py","title":"enable_sync_mode"},{"location":"stable/stretch_body/stepper/#enable_vel_pid","text":"enable_vel_pid ( self ) Source: stretch_body/stepper.py","title":"enable_vel_pid"},{"location":"stable/stretch_body/stepper/#enable_vel_traj","text":"enable_vel_traj ( self ) Source: stretch_body/stepper.py","title":"enable_vel_traj"},{"location":"stable/stretch_body/stepper/#get_chip_id","text":"get_chip_id ( self ) Source: stretch_body/stepper.py","title":"get_chip_id"},{"location":"stable/stretch_body/stepper/#mark_position","text":"mark_position ( self , x ) Source: stretch_body/stepper.py","title":"mark_position"},{"location":"stable/stretch_body/stepper/#menu_transaction","text":"menu_transaction ( self , x , do_print = True ) Source: stretch_body/stepper.py","title":"menu_transaction"},{"location":"stable/stretch_body/stepper/#pack_command","text":"pack_command ( self , s , sidx ) Source: stretch_body/stepper.py","title":"pack_command"},{"location":"stable/stretch_body/stepper/#pack_gains","text":"pack_gains ( self , s , sidx ) Source: stretch_body/stepper.py","title":"pack_gains"},{"location":"stable/stretch_body/stepper/#pack_motion_limits","text":"pack_motion_limits ( self , s , sidx ) Source: stretch_body/stepper.py","title":"pack_motion_limits"},{"location":"stable/stretch_body/stepper/#pack_trigger","text":"pack_trigger ( self , s , sidx ) Source: stretch_body/stepper.py","title":"pack_trigger"},{"location":"stable/stretch_body/stepper/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/stepper.py","title":"pretty_print"},{"location":"stable/stretch_body/stepper/#print_menu","text":"print_menu ( self ) Source: stretch_body/stepper.py","title":"print_menu"},{"location":"stable/stretch_body/stepper/#pull_status","text":"pull_status ( self , exiting = False ) Source: stretch_body/stepper.py","title":"pull_status"},{"location":"stable/stretch_body/stepper/#push_command","text":"push_command ( self , exiting = False ) Source: stretch_body/stepper.py","title":"push_command"},{"location":"stable/stretch_body/stepper/#read_encoder_calibration_from_yaml","text":"read_encoder_calibration_from_YAML ( self ) Source: stretch_body/stepper.py","title":"read_encoder_calibration_from_YAML"},{"location":"stable/stretch_body/stepper/#read_encoder_calibration_from_flash","text":"read_encoder_calibration_from_flash ( self ) Source: stretch_body/stepper.py","title":"read_encoder_calibration_from_flash"},{"location":"stable/stretch_body/stepper/#read_gains_from_flash","text":"read_gains_from_flash ( self ) Source: stretch_body/stepper.py","title":"read_gains_from_flash"},{"location":"stable/stretch_body/stepper/#reset_motion_gen","text":"reset_motion_gen ( self ) Source: stretch_body/stepper.py","title":"reset_motion_gen"},{"location":"stable/stretch_body/stepper/#reset_pos_calibrated","text":"reset_pos_calibrated ( self ) Source: stretch_body/stepper.py","title":"reset_pos_calibrated"},{"location":"stable/stretch_body/stepper/#rpc_board_info_reply","text":"rpc_board_info_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_board_info_reply"},{"location":"stable/stretch_body/stepper/#rpc_command_reply","text":"rpc_command_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_command_reply"},{"location":"stable/stretch_body/stepper/#rpc_enc_calib_reply","text":"rpc_enc_calib_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_enc_calib_reply"},{"location":"stable/stretch_body/stepper/#rpc_gains_reply","text":"rpc_gains_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_gains_reply"},{"location":"stable/stretch_body/stepper/#rpc_load_test_reply","text":"rpc_load_test_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_load_test_reply"},{"location":"stable/stretch_body/stepper/#rpc_menu_on_reply","text":"rpc_menu_on_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_menu_on_reply"},{"location":"stable/stretch_body/stepper/#rpc_motion_limits_reply","text":"rpc_motion_limits_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_motion_limits_reply"},{"location":"stable/stretch_body/stepper/#rpc_read_gains_from_flash_reply","text":"rpc_read_gains_from_flash_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_read_gains_from_flash_reply"},{"location":"stable/stretch_body/stepper/#rpc_status_reply","text":"rpc_status_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_status_reply"},{"location":"stable/stretch_body/stepper/#rpc_trigger_reply","text":"rpc_trigger_reply ( self , reply ) Source: stretch_body/stepper.py","title":"rpc_trigger_reply"},{"location":"stable/stretch_body/stepper/#set_command","text":"set_command ( self , mode = None , x_des = None , v_des = None , a_des = None , i_des = None , stiffness = None , i_feedforward = None , i_contact_pos = None , i_contact_neg = None , ) Source: stretch_body/stepper.py","title":"set_command"},{"location":"stable/stretch_body/stepper/#set_gains","text":"set_gains ( self , g ) Source: stretch_body/stepper.py","title":"set_gains"},{"location":"stable/stretch_body/stepper/#set_load_test","text":"set_load_test ( self ) Source: stretch_body/stepper.py","title":"set_load_test"},{"location":"stable/stretch_body/stepper/#set_motion_limits","text":"set_motion_limits ( self , limit_neg , limit_pos ) Source: stretch_body/stepper.py","title":"set_motion_limits"},{"location":"stable/stretch_body/stepper/#set_pos_calibrated","text":"set_pos_calibrated ( self ) Source: stretch_body/stepper.py","title":"set_pos_calibrated"},{"location":"stable/stretch_body/stepper/#startup","text":"startup ( self ) Source: stretch_body/stepper.py","title":"startup"},{"location":"stable/stretch_body/stepper/#stop","text":"stop ( self ) Source: stretch_body/stepper.py","title":"stop"},{"location":"stable/stretch_body/stepper/#torque_to_current","text":"torque_to_current ( self , tq ) Source: stretch_body/stepper.py","title":"torque_to_current"},{"location":"stable/stretch_body/stepper/#turn_menu_interface_on","text":"turn_menu_interface_on ( self ) Source: stretch_body/stepper.py","title":"turn_menu_interface_on"},{"location":"stable/stretch_body/stepper/#turn_rpc_interface_on","text":"turn_rpc_interface_on ( self ) Source: stretch_body/stepper.py","title":"turn_rpc_interface_on"},{"location":"stable/stretch_body/stepper/#unpack_board_info","text":"unpack_board_info ( self , s ) Source: stretch_body/stepper.py","title":"unpack_board_info"},{"location":"stable/stretch_body/stepper/#unpack_gains","text":"unpack_gains ( self , s ) Source: stretch_body/stepper.py","title":"unpack_gains"},{"location":"stable/stretch_body/stepper/#unpack_status","text":"unpack_status ( self , s ) Source: stretch_body/stepper.py","title":"unpack_status"},{"location":"stable/stretch_body/stepper/#wait_until_at_setpoint","text":"wait_until_at_setpoint ( self , timeout = 15.0 ) Source: stretch_body/stepper.py","title":"wait_until_at_setpoint"},{"location":"stable/stretch_body/stepper/#write_encoder_calibration_to_yaml","text":"write_encoder_calibration_to_YAML ( self , data ) Source: stretch_body/stepper.py","title":"write_encoder_calibration_to_YAML"},{"location":"stable/stretch_body/stepper/#write_encoder_calibration_to_flash","text":"write_encoder_calibration_to_flash ( self , data ) Source: stretch_body/stepper.py","title":"write_encoder_calibration_to_flash"},{"location":"stable/stretch_body/stepper/#write_gains_to_yaml","text":"write_gains_to_YAML ( self ) Source: stretch_body/stepper.py","title":"write_gains_to_YAML"},{"location":"stable/stretch_body/stepper/#write_gains_to_flash","text":"write_gains_to_flash ( self ) Source: stretch_body/stepper.py","title":"write_gains_to_flash"},{"location":"stable/stretch_body/stretch_gripper/","text":"stretch_body.stretch_gripper \u00b6 Class StretchGripper \u00b6 StretchGripper ( chain = None ) Source: stretch_body/stretch_gripper.py API to the Stretch RE1 Gripper The StretchGripper motion is non-linear w.r.t to motor motion due to its design As such, the position of the gripper is represented at as unit-less value, 'pct' The Pct ranges from approximately -100 (fully closed) to approximately +50 (fully open) A Pct of zero is the fingertips just touching Methods \u00b6 home \u00b6 home ( self , move_to_zero = True ) Source: stretch_body/stretch_gripper.py move_by \u00b6 move_by ( self , delta_pct , v_r = None , a_r = None ) Source: stretch_body/stretch_gripper.py delta_pct: commanded incremental motion (pct). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2) move_to \u00b6 move_to ( self , pct , v_r = None , a_r = None ) Source: stretch_body/stretch_gripper.py pct: commanded absolute position (Pct). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2) pct_to_world_rad \u00b6 pct_to_world_rad ( self , pct ) Source: stretch_body/stretch_gripper.py pose \u00b6 pose ( self , p , v_r = None , a_r = None ) Source: stretch_body/stretch_gripper.py p: Dictionary key to named pose (eg 'close') pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/stretch_gripper.py pull_status \u00b6 pull_status ( self , data = None ) Source: stretch_body/stretch_gripper.py step_sentry \u00b6 step_sentry ( self ) Source: stretch_body/stretch_gripper.py This sentry attempts to prevent the gripper servo from overheating during a prolonged grasp When the servo is stalled and exerting an effort obove a threashold it will command a 'back off' position (slightly open the grasp) This reduces the PID steady state error and lowers the commanded current The spring design of the gripper allows it retain its grasp despite the backoff world_rad_to_pct \u00b6 world_rad_to_pct ( self , r ) Source: stretch_body/stretch_gripper.py","title":"stretch_gripper"},{"location":"stable/stretch_body/stretch_gripper/#stretch_bodystretch_gripper","text":"","title":"stretch_body.stretch_gripper"},{"location":"stable/stretch_body/stretch_gripper/#class-stretchgripper","text":"StretchGripper ( chain = None ) Source: stretch_body/stretch_gripper.py API to the Stretch RE1 Gripper The StretchGripper motion is non-linear w.r.t to motor motion due to its design As such, the position of the gripper is represented at as unit-less value, 'pct' The Pct ranges from approximately -100 (fully closed) to approximately +50 (fully open) A Pct of zero is the fingertips just touching","title":"Class StretchGripper"},{"location":"stable/stretch_body/stretch_gripper/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/stretch_gripper/#home","text":"home ( self , move_to_zero = True ) Source: stretch_body/stretch_gripper.py","title":"home"},{"location":"stable/stretch_body/stretch_gripper/#move_by","text":"move_by ( self , delta_pct , v_r = None , a_r = None ) Source: stretch_body/stretch_gripper.py delta_pct: commanded incremental motion (pct). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"move_by"},{"location":"stable/stretch_body/stretch_gripper/#move_to","text":"move_to ( self , pct , v_r = None , a_r = None ) Source: stretch_body/stretch_gripper.py pct: commanded absolute position (Pct). v_r: velocity for trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"move_to"},{"location":"stable/stretch_body/stretch_gripper/#pct_to_world_rad","text":"pct_to_world_rad ( self , pct ) Source: stretch_body/stretch_gripper.py","title":"pct_to_world_rad"},{"location":"stable/stretch_body/stretch_gripper/#pose","text":"pose ( self , p , v_r = None , a_r = None ) Source: stretch_body/stretch_gripper.py p: Dictionary key to named pose (eg 'close')","title":"pose"},{"location":"stable/stretch_body/stretch_gripper/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/stretch_gripper.py","title":"pretty_print"},{"location":"stable/stretch_body/stretch_gripper/#pull_status","text":"pull_status ( self , data = None ) Source: stretch_body/stretch_gripper.py","title":"pull_status"},{"location":"stable/stretch_body/stretch_gripper/#step_sentry","text":"step_sentry ( self ) Source: stretch_body/stretch_gripper.py This sentry attempts to prevent the gripper servo from overheating during a prolonged grasp When the servo is stalled and exerting an effort obove a threashold it will command a 'back off' position (slightly open the grasp) This reduces the PID steady state error and lowers the commanded current The spring design of the gripper allows it retain its grasp despite the backoff","title":"step_sentry"},{"location":"stable/stretch_body/stretch_gripper/#world_rad_to_pct","text":"world_rad_to_pct ( self , r ) Source: stretch_body/stretch_gripper.py","title":"world_rad_to_pct"},{"location":"stable/stretch_body/transport/","text":"stretch_body.transport \u00b6 Class Transport \u00b6 Transport ( usb , verbose = True ) Source: stretch_body/transport.py Handle serial communication with Devices Methods \u00b6 is_step2_complete \u00b6 is_step2_complete ( self ) Source: stretch_body/transport.py is_step_complete \u00b6 is_step_complete ( self ) Source: stretch_body/transport.py queue_rpc \u00b6 queue_rpc ( self , n , reply_callback ) Source: stretch_body/transport.py queue_rpc2 \u00b6 queue_rpc2 ( self , n , reply_callback ) Source: stretch_body/transport.py startup \u00b6 startup ( self ) Source: stretch_body/transport.py step \u00b6 step ( self , exiting = False ) Source: stretch_body/transport.py step2 \u00b6 step2 ( self , exiting = False ) Source: stretch_body/transport.py step_rpc \u00b6 step_rpc ( self , rpc , rpc_callback ) Source: stretch_body/transport.py stop \u00b6 stop ( self ) Source: stretch_body/transport.py Class TransportError \u00b6 Source: stretch_body/transport.py Base class for exceptions in this module. pack_double_t \u00b6 pack_double_t ( s , sidx , x ) Source: stretch_body/transport.py pack_float_t \u00b6 pack_float_t ( s , sidx , x ) Source: stretch_body/transport.py pack_int16_t \u00b6 pack_int16_t ( s , sidx , x ) Source: stretch_body/transport.py pack_int32_t \u00b6 pack_int32_t ( s , sidx , x ) Source: stretch_body/transport.py pack_string_t \u00b6 pack_string_t ( s , sidx , x ) Source: stretch_body/transport.py pack_uint16_t \u00b6 pack_uint16_t ( s , sidx , x ) Source: stretch_body/transport.py pack_uint32_t \u00b6 pack_uint32_t ( s , sidx , x ) Source: stretch_body/transport.py pack_uint8_t \u00b6 pack_uint8_t ( s , sidx , x ) Source: stretch_body/transport.py unpack_double_t \u00b6 unpack_double_t ( s ) Source: stretch_body/transport.py unpack_float_t \u00b6 unpack_float_t ( s ) Source: stretch_body/transport.py unpack_int16_t \u00b6 unpack_int16_t ( s ) Source: stretch_body/transport.py unpack_int32_t \u00b6 unpack_int32_t ( s ) Source: stretch_body/transport.py unpack_string_t \u00b6 unpack_string_t ( s , n ) Source: stretch_body/transport.py unpack_uint16_t \u00b6 unpack_uint16_t ( s ) Source: stretch_body/transport.py unpack_uint32_t \u00b6 unpack_uint32_t ( s ) Source: stretch_body/transport.py unpack_uint8_t \u00b6 unpack_uint8_t ( s ) Source: stretch_body/transport.py","title":"transport"},{"location":"stable/stretch_body/transport/#stretch_bodytransport","text":"","title":"stretch_body.transport"},{"location":"stable/stretch_body/transport/#class-transport","text":"Transport ( usb , verbose = True ) Source: stretch_body/transport.py Handle serial communication with Devices","title":"Class Transport"},{"location":"stable/stretch_body/transport/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/transport/#is_step2_complete","text":"is_step2_complete ( self ) Source: stretch_body/transport.py","title":"is_step2_complete"},{"location":"stable/stretch_body/transport/#is_step_complete","text":"is_step_complete ( self ) Source: stretch_body/transport.py","title":"is_step_complete"},{"location":"stable/stretch_body/transport/#queue_rpc","text":"queue_rpc ( self , n , reply_callback ) Source: stretch_body/transport.py","title":"queue_rpc"},{"location":"stable/stretch_body/transport/#queue_rpc2","text":"queue_rpc2 ( self , n , reply_callback ) Source: stretch_body/transport.py","title":"queue_rpc2"},{"location":"stable/stretch_body/transport/#startup","text":"startup ( self ) Source: stretch_body/transport.py","title":"startup"},{"location":"stable/stretch_body/transport/#step","text":"step ( self , exiting = False ) Source: stretch_body/transport.py","title":"step"},{"location":"stable/stretch_body/transport/#step2","text":"step2 ( self , exiting = False ) Source: stretch_body/transport.py","title":"step2"},{"location":"stable/stretch_body/transport/#step_rpc","text":"step_rpc ( self , rpc , rpc_callback ) Source: stretch_body/transport.py","title":"step_rpc"},{"location":"stable/stretch_body/transport/#stop","text":"stop ( self ) Source: stretch_body/transport.py","title":"stop"},{"location":"stable/stretch_body/transport/#class-transporterror","text":"Source: stretch_body/transport.py Base class for exceptions in this module.","title":"Class TransportError"},{"location":"stable/stretch_body/transport/#pack_double_t","text":"pack_double_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_double_t"},{"location":"stable/stretch_body/transport/#pack_float_t","text":"pack_float_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_float_t"},{"location":"stable/stretch_body/transport/#pack_int16_t","text":"pack_int16_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_int16_t"},{"location":"stable/stretch_body/transport/#pack_int32_t","text":"pack_int32_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_int32_t"},{"location":"stable/stretch_body/transport/#pack_string_t","text":"pack_string_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_string_t"},{"location":"stable/stretch_body/transport/#pack_uint16_t","text":"pack_uint16_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_uint16_t"},{"location":"stable/stretch_body/transport/#pack_uint32_t","text":"pack_uint32_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_uint32_t"},{"location":"stable/stretch_body/transport/#pack_uint8_t","text":"pack_uint8_t ( s , sidx , x ) Source: stretch_body/transport.py","title":"pack_uint8_t"},{"location":"stable/stretch_body/transport/#unpack_double_t","text":"unpack_double_t ( s ) Source: stretch_body/transport.py","title":"unpack_double_t"},{"location":"stable/stretch_body/transport/#unpack_float_t","text":"unpack_float_t ( s ) Source: stretch_body/transport.py","title":"unpack_float_t"},{"location":"stable/stretch_body/transport/#unpack_int16_t","text":"unpack_int16_t ( s ) Source: stretch_body/transport.py","title":"unpack_int16_t"},{"location":"stable/stretch_body/transport/#unpack_int32_t","text":"unpack_int32_t ( s ) Source: stretch_body/transport.py","title":"unpack_int32_t"},{"location":"stable/stretch_body/transport/#unpack_string_t","text":"unpack_string_t ( s , n ) Source: stretch_body/transport.py","title":"unpack_string_t"},{"location":"stable/stretch_body/transport/#unpack_uint16_t","text":"unpack_uint16_t ( s ) Source: stretch_body/transport.py","title":"unpack_uint16_t"},{"location":"stable/stretch_body/transport/#unpack_uint32_t","text":"unpack_uint32_t ( s ) Source: stretch_body/transport.py","title":"unpack_uint32_t"},{"location":"stable/stretch_body/transport/#unpack_uint8_t","text":"unpack_uint8_t ( s ) Source: stretch_body/transport.py","title":"unpack_uint8_t"},{"location":"stable/stretch_body/version/","text":"stretch_body.version \u00b6","title":"version"},{"location":"stable/stretch_body/version/#stretch_bodyversion","text":"","title":"stretch_body.version"},{"location":"stable/stretch_body/wacc/","text":"stretch_body.wacc \u00b6 Class Wacc \u00b6 Wacc ( verbose = False ) Source: stretch_body/wacc.py API to the Stretch RE1 wrist+accelerometer (Wacc) board The Wacc has: -- 3-axis accelerometer reported as Ax,Ay,and Az -- Two digital inputs D0, D1 -- Two digital outputs D2, D3 -- One analog input: A0 -- A single tap count based on the accelerometer Methods \u00b6 board_reset \u00b6 board_reset ( self ) Source: stretch_body/wacc.py pack_command \u00b6 pack_command ( self , s , sidx ) Source: stretch_body/wacc.py pack_config \u00b6 pack_config ( self , s , sidx ) Source: stretch_body/wacc.py pretty_print \u00b6 pretty_print ( self ) Source: stretch_body/wacc.py pull_status \u00b6 pull_status ( self , exiting = False ) Source: stretch_body/wacc.py push_command \u00b6 push_command ( self , exiting = False ) Source: stretch_body/wacc.py rpc_board_info_reply \u00b6 rpc_board_info_reply ( self , reply ) Source: stretch_body/wacc.py rpc_command_reply \u00b6 rpc_command_reply ( self , reply ) Source: stretch_body/wacc.py rpc_config_reply \u00b6 rpc_config_reply ( self , reply ) Source: stretch_body/wacc.py rpc_status_reply \u00b6 rpc_status_reply ( self , reply ) Source: stretch_body/wacc.py set_D2 \u00b6 set_D2 ( self , on ) Source: stretch_body/wacc.py Set the Digital Out 2 on the Wacc expansion header set_D3 \u00b6 set_D3 ( self , on ) Source: stretch_body/wacc.py Set the Digital Out 3 on the Wacc expansion header startup \u00b6 startup ( self ) Source: stretch_body/wacc.py stop \u00b6 stop ( self ) Source: stretch_body/wacc.py unpack_board_info \u00b6 unpack_board_info ( self , s ) Source: stretch_body/wacc.py unpack_status \u00b6 unpack_status ( self , s ) Source: stretch_body/wacc.py","title":"wacc"},{"location":"stable/stretch_body/wacc/#stretch_bodywacc","text":"","title":"stretch_body.wacc"},{"location":"stable/stretch_body/wacc/#class-wacc","text":"Wacc ( verbose = False ) Source: stretch_body/wacc.py API to the Stretch RE1 wrist+accelerometer (Wacc) board The Wacc has: -- 3-axis accelerometer reported as Ax,Ay,and Az -- Two digital inputs D0, D1 -- Two digital outputs D2, D3 -- One analog input: A0 -- A single tap count based on the accelerometer","title":"Class Wacc"},{"location":"stable/stretch_body/wacc/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/wacc/#board_reset","text":"board_reset ( self ) Source: stretch_body/wacc.py","title":"board_reset"},{"location":"stable/stretch_body/wacc/#pack_command","text":"pack_command ( self , s , sidx ) Source: stretch_body/wacc.py","title":"pack_command"},{"location":"stable/stretch_body/wacc/#pack_config","text":"pack_config ( self , s , sidx ) Source: stretch_body/wacc.py","title":"pack_config"},{"location":"stable/stretch_body/wacc/#pretty_print","text":"pretty_print ( self ) Source: stretch_body/wacc.py","title":"pretty_print"},{"location":"stable/stretch_body/wacc/#pull_status","text":"pull_status ( self , exiting = False ) Source: stretch_body/wacc.py","title":"pull_status"},{"location":"stable/stretch_body/wacc/#push_command","text":"push_command ( self , exiting = False ) Source: stretch_body/wacc.py","title":"push_command"},{"location":"stable/stretch_body/wacc/#rpc_board_info_reply","text":"rpc_board_info_reply ( self , reply ) Source: stretch_body/wacc.py","title":"rpc_board_info_reply"},{"location":"stable/stretch_body/wacc/#rpc_command_reply","text":"rpc_command_reply ( self , reply ) Source: stretch_body/wacc.py","title":"rpc_command_reply"},{"location":"stable/stretch_body/wacc/#rpc_config_reply","text":"rpc_config_reply ( self , reply ) Source: stretch_body/wacc.py","title":"rpc_config_reply"},{"location":"stable/stretch_body/wacc/#rpc_status_reply","text":"rpc_status_reply ( self , reply ) Source: stretch_body/wacc.py","title":"rpc_status_reply"},{"location":"stable/stretch_body/wacc/#set_d2","text":"set_D2 ( self , on ) Source: stretch_body/wacc.py Set the Digital Out 2 on the Wacc expansion header","title":"set_D2"},{"location":"stable/stretch_body/wacc/#set_d3","text":"set_D3 ( self , on ) Source: stretch_body/wacc.py Set the Digital Out 3 on the Wacc expansion header","title":"set_D3"},{"location":"stable/stretch_body/wacc/#startup","text":"startup ( self ) Source: stretch_body/wacc.py","title":"startup"},{"location":"stable/stretch_body/wacc/#stop","text":"stop ( self ) Source: stretch_body/wacc.py","title":"stop"},{"location":"stable/stretch_body/wacc/#unpack_board_info","text":"unpack_board_info ( self , s ) Source: stretch_body/wacc.py","title":"unpack_board_info"},{"location":"stable/stretch_body/wacc/#unpack_status","text":"unpack_status ( self , s ) Source: stretch_body/wacc.py","title":"unpack_status"},{"location":"stable/stretch_body/wrist_yaw/","text":"stretch_body.wrist_yaw \u00b6 Class WristYaw \u00b6 WristYaw ( chain = None ) Source: stretch_body/wrist_yaw.py API to the Stretch RE1 wrist yaw joint Methods \u00b6 home \u00b6 home ( self ) Source: stretch_body/wrist_yaw.py Home to hardstops pose \u00b6 pose ( self , p , v_r = None , a_r = None ) Source: stretch_body/wrist_yaw.py p: Dictionary key to named pose (eg 'forward') v_r: velocityfor trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2) step_sentry \u00b6 step_sentry ( self ) Source: stretch_body/wrist_yaw.py This sentry attempts to prevent the wrist yaw servo from overheating if it is pushing against an object for too long It works by backing off the commanded position from the current position so as to lower the steady state error of the PID controller","title":"wrist_yaw"},{"location":"stable/stretch_body/wrist_yaw/#stretch_bodywrist_yaw","text":"","title":"stretch_body.wrist_yaw"},{"location":"stable/stretch_body/wrist_yaw/#class-wristyaw","text":"WristYaw ( chain = None ) Source: stretch_body/wrist_yaw.py API to the Stretch RE1 wrist yaw joint","title":"Class WristYaw"},{"location":"stable/stretch_body/wrist_yaw/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/wrist_yaw/#home","text":"home ( self ) Source: stretch_body/wrist_yaw.py Home to hardstops","title":"home"},{"location":"stable/stretch_body/wrist_yaw/#pose","text":"pose ( self , p , v_r = None , a_r = None ) Source: stretch_body/wrist_yaw.py p: Dictionary key to named pose (eg 'forward') v_r: velocityfor trapezoidal motion profile (rad/s). a_r: acceleration for trapezoidal motion profile (rad/s^2)","title":"pose"},{"location":"stable/stretch_body/wrist_yaw/#step_sentry","text":"step_sentry ( self ) Source: stretch_body/wrist_yaw.py This sentry attempts to prevent the wrist yaw servo from overheating if it is pushing against an object for too long It works by backing off the commanded position from the current position so as to lower the steady state error of the PID controller","title":"step_sentry"},{"location":"stable/stretch_body/xbox_controller/","text":"stretch_body.xbox_controller \u00b6 Class Button \u00b6 Button () Source: stretch_body/xbox_controller.py Methods \u00b6 print_string \u00b6 print_string ( self ) Source: stretch_body/xbox_controller.py update \u00b6 update ( self , state ) Source: stretch_body/xbox_controller.py Class Stick \u00b6 Stick () Source: stretch_body/xbox_controller.py Methods \u00b6 print_string \u00b6 print_string ( self ) Source: stretch_body/xbox_controller.py update_x \u00b6 update_x ( self , abs_x ) Source: stretch_body/xbox_controller.py update_y \u00b6 update_y ( self , abs_y ) Source: stretch_body/xbox_controller.py Class Trigger \u00b6 Trigger ( xbox_one = False ) Source: stretch_body/xbox_controller.py Methods \u00b6 print_string \u00b6 print_string ( self ) Source: stretch_body/xbox_controller.py update \u00b6 update ( self , state ) Source: stretch_body/xbox_controller.py Class XboxController \u00b6 XboxController ( print_events = False ) Source: stretch_body/xbox_controller.py Successfully tested with the following controllers: + Xbox One Controller connected using a USB cable (change xbox_one parameter to True for full 10 bit trigger information) + EasySMX wireless controller set to appropriate mode (Xbox 360 mode with upper half of ring LED illuminated - top two LED quarter circle arcs) + JAMSWALL Xbox 360 Wireless Controller (Sometimes issues would occur after inactivity that would seem to require unplugging and replugging the USB dongle.) Unsuccessful tests: - Xbox One Controller connected via Bluetooth - Xbox 360 Controller connected with an Insten Wireless Controller USB Charging Cable +/- VOYEE Wired Xbox 360 Controller mostly worked, but it had various issues including false middle LED button presses, phantom shoulder button presses, and low joystick sensitivity that made small motions more difficult to execute. Methods \u00b6 get_state \u00b6 get_state ( self ) Source: stretch_body/xbox_controller.py start \u00b6 start ( self ) Source: stretch_body/xbox_controller.py stop \u00b6 stop ( self ) Source: stretch_body/xbox_controller.py update \u00b6 update ( self ) Source: stretch_body/xbox_controller.py main \u00b6 main () Source: stretch_body/xbox_controller.py","title":"xbox_controller"},{"location":"stable/stretch_body/xbox_controller/#stretch_bodyxbox_controller","text":"","title":"stretch_body.xbox_controller"},{"location":"stable/stretch_body/xbox_controller/#class-button","text":"Button () Source: stretch_body/xbox_controller.py","title":"Class Button"},{"location":"stable/stretch_body/xbox_controller/#methods","text":"","title":"Methods"},{"location":"stable/stretch_body/xbox_controller/#print_string","text":"print_string ( self ) Source: stretch_body/xbox_controller.py","title":"print_string"},{"location":"stable/stretch_body/xbox_controller/#update","text":"update ( self , state ) Source: stretch_body/xbox_controller.py","title":"update"},{"location":"stable/stretch_body/xbox_controller/#class-stick","text":"Stick () Source: stretch_body/xbox_controller.py","title":"Class Stick"},{"location":"stable/stretch_body/xbox_controller/#methods_1","text":"","title":"Methods"},{"location":"stable/stretch_body/xbox_controller/#print_string_1","text":"print_string ( self ) Source: stretch_body/xbox_controller.py","title":"print_string"},{"location":"stable/stretch_body/xbox_controller/#update_x","text":"update_x ( self , abs_x ) Source: stretch_body/xbox_controller.py","title":"update_x"},{"location":"stable/stretch_body/xbox_controller/#update_y","text":"update_y ( self , abs_y ) Source: stretch_body/xbox_controller.py","title":"update_y"},{"location":"stable/stretch_body/xbox_controller/#class-trigger","text":"Trigger ( xbox_one = False ) Source: stretch_body/xbox_controller.py","title":"Class Trigger"},{"location":"stable/stretch_body/xbox_controller/#methods_2","text":"","title":"Methods"},{"location":"stable/stretch_body/xbox_controller/#print_string_2","text":"print_string ( self ) Source: stretch_body/xbox_controller.py","title":"print_string"},{"location":"stable/stretch_body/xbox_controller/#update_1","text":"update ( self , state ) Source: stretch_body/xbox_controller.py","title":"update"},{"location":"stable/stretch_body/xbox_controller/#class-xboxcontroller","text":"XboxController ( print_events = False ) Source: stretch_body/xbox_controller.py Successfully tested with the following controllers: + Xbox One Controller connected using a USB cable (change xbox_one parameter to True for full 10 bit trigger information) + EasySMX wireless controller set to appropriate mode (Xbox 360 mode with upper half of ring LED illuminated - top two LED quarter circle arcs) + JAMSWALL Xbox 360 Wireless Controller (Sometimes issues would occur after inactivity that would seem to require unplugging and replugging the USB dongle.) Unsuccessful tests: - Xbox One Controller connected via Bluetooth - Xbox 360 Controller connected with an Insten Wireless Controller USB Charging Cable +/- VOYEE Wired Xbox 360 Controller mostly worked, but it had various issues including false middle LED button presses, phantom shoulder button presses, and low joystick sensitivity that made small motions more difficult to execute.","title":"Class XboxController"},{"location":"stable/stretch_body/xbox_controller/#methods_3","text":"","title":"Methods"},{"location":"stable/stretch_body/xbox_controller/#get_state","text":"get_state ( self ) Source: stretch_body/xbox_controller.py","title":"get_state"},{"location":"stable/stretch_body/xbox_controller/#start","text":"start ( self ) Source: stretch_body/xbox_controller.py","title":"start"},{"location":"stable/stretch_body/xbox_controller/#stop","text":"stop ( self ) Source: stretch_body/xbox_controller.py","title":"stop"},{"location":"stable/stretch_body/xbox_controller/#update_2","text":"update ( self ) Source: stretch_body/xbox_controller.py","title":"update"},{"location":"stable/stretch_body/xbox_controller/#main","text":"main () Source: stretch_body/xbox_controller.py","title":"main"}]}